var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AdminModule.html",[0,1.502,1,2.267]],["body/modules/AdminModule.html",[0,2.634,1,4.496,2,2.361,3,2.361,4,2.723,5,2.723,6,2.361,7,3.67,8,3.67,9,4.01,10,4.01,11,4.01,12,4.01,13,4.353,14,0.022,15,4.222,16,3.377,17,2.723,18,2.361,19,0.325,20,0.29,21,0.29,22,4.699,23,2.284,24,4.339,25,3.974,26,3.656,27,0.657,28,1.049,29,2.948,30,2.076,31,1.388,32,2.723,33,1.924,34,4.01,35,5.828,36,4.699,37,4.01,38,4.01,39,4.699,40,4.01,41,3.557,42,0.325,43,0.014,44,0.017,45,0.017]],["title/controllers/AdminProductController.html",[25,2.267,46,1.336]],["body/controllers/AdminProductController.html",[14,0.022,19,0.101,20,0.09,21,0.09,23,0.572,25,1.989,27,0.511,28,0.326,33,0.482,42,0.101,43,0.007,44,0.007,45,0.007,46,1.173,47,4.286,48,1.245,49,0.915,50,1.459,51,1.375,52,1.679,53,4.186,54,3.273,55,1.856,56,0.123,57,0.809,58,3.197,59,2.331,60,1.679,61,1.679,62,3.716,63,2.093,64,3.171,65,3.171,66,3.171,67,3.171,68,3.171,69,2.397,70,1.245,71,2.992,72,1.633,73,1.245,74,1.633,75,2.706,76,1.856,77,3.453,78,2.331,79,3.967,80,0.784,81,5.006,82,3.397,83,3.397,84,2.255,85,3.83,86,2.452,87,4.865,88,4.186,89,5.485,90,4.865,91,6.427,92,2.955,93,0.975,94,1.459,95,2.093,96,2.018,97,1.345,98,1.061,99,1.758,100,2.706,101,2,102,3.584,103,1.105,104,2.331,105,0.999,106,2.255,107,1.245,108,4.331,109,3.83,110,1.245,111,2.401,112,1.459,113,1.459,114,2.545,115,2.108,116,2.4,117,1.32,118,0.961,119,0.999,120,1.22,121,0.999,122,0.999,123,5.006,124,4.586,125,3.34,126,1.459,127,2.768,128,1.245,129,1.245,130,2.706,131,1.856,132,1.459,133,1.245,134,1.459,135,2.4,136,2.093,137,1.459,138,2.093,139,1.459,140,2.452,141,1.459,142,4.073,143,2.153,144,2.401,145,4.143,146,2.645,147,3.408,148,1.459,149,1.459,150,1.459,151,2.153,152,1.459,153,1.459,154,2.452,155,1.459,156,2.401,157,1.459,158,1.459,159,2.452,160,1.245,161,2.401,162,1.459,163,1.459,164,1.245,165,1.154,166,1.459,167,0.999,168,3.267,169,1.105,170,1.459,171,1.421,172,2.452,173,1.019,174,1.538,175,1.679,176,1.538,177,0.999,178,2.397,179,0.999,180,0.915,181,0.999,182,3.942,183,0.915,184,1.989,185,1.459,186,1.459,187,2.093,188,1.459,189,1.459,190,0.845,191,0.733,192,1.459,193,0.999,194,1.232,195,1.459,196,1.459,197,0.431,198,0.786,199,0.915,200,3.552,201,4.396,202,0.999,203,1.105,204,1.105,205,1.856,206,0.431,207,1.459,208,0.999,209,1.105,210,0.999,211,0.999,212,1.245,213,1.459,214,1.105,215,1.105,216,0.786,217,0.54,218,3.469,219,3.788,220,1.245,221,0.845,222,1.727,223,2.815,224,1.245,225,0.786,226,0.786,227,0.786,228,1.245,229,1.245,230,1.105,231,1.459,232,1.245,233,1.459,234,0.999,235,1.105,236,3.83,237,0.999,238,3.397,239,1.245,240,1.245,241,1.245,242,1.245,243,1.245,244,1.831,245,1.459,246,1.459,247,1.459,248,1.459,249,1.459,250,1.459,251,1.459,252,1.459,253,1.459,254,1.459,255,1.459]],["title/classes/AdminUpdateUserDto.html",[43,0.011,256,2.267]],["body/classes/AdminUpdateUserDto.html",[14,0.022,19,0.21,20,0.188,21,0.188,27,0.565,42,0.21,43,0.017,44,0.013,45,0.013,51,1.262,54,2.554,56,0.256,72,1.936,80,0.836,92,2.185,93,1.156,97,1.528,98,1.324,99,1.704,120,1.275,146,2.381,165,2.612,171,1.758,173,1.808,174,2.728,197,2.009,198,1.634,206,1.284,256,3.188,257,1.189,258,4.174,259,2.078,260,2.52,261,1.921,262,1.998,263,0.971,264,3.847,265,2.8,266,2.554,267,2.391,268,2.945,269,4.337,270,2.554,271,4.491,272,2.846,273,4.04,274,3.034,275,2.59,276,4.392,277,4.337,278,3.034,279,3.034,280,3.481,281,4.737,282,4.348,283,3.034,284,2.524,285,4.348,286,3.034,287,4.187,288,3.034,289,1.904,290,2.185,291,1.704,292,3.034,293,3.034,294,2.612,295,3.034,296,3.034,297,3.034,298,1.501,299,1.808,300,3.034,301,3.034,302,2.988,303,2.978,304,1.341,305,2.94,306,2.308,307,3.034,308,1.519,309,2.728,310,1.634,311,3.53,312,4.348,313,1.758,314,1.634,315,1.428,316,1.758,317,1.904,318,1.341]],["title/controllers/AdminUserController.html",[24,2.475,46,1.336]],["body/controllers/AdminUserController.html",[14,0.022,15,2.639,19,0.174,20,0.155,21,0.155,23,0.985,24,3.12,27,0.577,28,0.561,31,1.909,33,0.83,37,2.145,38,2.145,42,0.174,43,0.011,44,0.011,45,0.011,46,1.684,47,4.327,49,1.577,51,1.357,52,2.593,54,2.289,55,2.866,56,0.212,57,1.25,58,3.175,60,2.593,61,2.593,69,2.733,72,1.606,79,1.577,80,0.719,88,3.448,90,3.838,92,1.263,93,0.959,96,1.9,97,1.359,98,1.071,99,0.985,101,2.244,102,3.077,103,1.903,105,1.722,106,2.733,107,3.232,110,2.145,111,2.639,114,3.472,115,2.621,116,2.866,117,2.928,118,1.484,119,1.722,120,1.211,121,1.722,122,1.722,125,3.193,127,2.878,128,2.145,129,2.145,130,3.888,131,1.903,142,3.448,146,2.531,147,3.312,164,2.145,165,1.782,167,1.722,169,1.903,171,2.194,173,1.574,174,1.577,176,2.375,177,1.722,178,2.733,179,1.722,180,1.577,181,1.722,182,3.838,190,1.456,191,1.263,193,1.722,194,1.902,197,0.742,198,1.353,199,1.577,200,3.586,201,4.233,202,2.593,204,1.903,205,2.866,206,0.742,208,1.722,209,1.903,210,1.722,211,1.722,212,2.145,214,1.903,215,1.903,216,1.353,217,0.929,218,3.412,219,3.12,222,1.698,230,1.903,232,2.145,234,1.722,235,1.903,237,1.722,238,2.866,243,2.145,256,3.18,261,1.111,262,2.024,263,0.561,267,2.69,276,2.375,284,1.987,290,1.263,291,1.484,318,1.111,319,3.232,320,2.514,321,4.327,322,4.555,323,2.729,324,3.148,325,2.866,326,2.514,327,3.888,328,3.232,329,2.514,330,2.514,331,2.514,332,2.514,333,2.194,334,2.514,335,2.514,336,2.514,337,4.327,338,2.514,339,3.232,340,1.577,341,1.722,342,2.145,343,2.145,344,3.786,345,2.514,346,2.514,347,4.642,348,4.555,349,4.555,350,2.514,351,2.514,352,4.555,353,2.514,354,1.456,355,2.514,356,2.514,357,2.514,358,2.514,359,2.514,360,2.145,361,2.514,362,2.514]],["title/classes/AdminUserQueryDto.html",[43,0.011,323,1.945]],["body/classes/AdminUserQueryDto.html",[14,0.022,19,0.166,20,0.148,21,0.148,27,0.457,31,1.461,42,0.306,43,0.015,44,0.013,45,0.011,51,1.272,54,2.222,56,0.202,72,1.914,80,0.841,93,1.142,98,1.321,99,1.733,106,1.834,115,2.352,118,1.733,120,1.253,146,1.829,165,2.327,173,0.995,197,1.937,206,0.707,257,0.938,258,4.114,260,2.114,261,1.612,262,1.909,263,0.815,265,2.056,266,2.222,267,2.081,268,2.562,270,2.222,272,2.657,273,4.009,284,2.286,287,2.499,294,2.327,298,2.1,299,2.213,302,2.381,304,1.058,305,2.898,306,2.056,308,0.836,310,1.289,311,3.531,313,1.387,314,1.289,315,1.127,316,1.387,317,1.502,323,2.381,324,1.127,363,1.387,364,3.347,365,3.029,366,3.029,367,3.029,368,3.029,369,2.056,370,2.979,371,3.141,372,2.774,373,2.774,374,4.68,375,3.744,376,3.649,377,2.394,378,3.649,379,2.394,380,3.649,381,2.043,382,2.394,383,2.485,384,2.394,385,2.394,386,2.324,387,1.965,388,2.485,389,3.096,390,2.866,391,2.394,392,2.394,393,2.185,394,2.394,395,2.394,396,2.394,397,2.394,398,2.394,399,3.387,400,2.394,401,2.394,402,3.387,403,2.114,404,2.394,405,2.394,406,2.381,407,2.663,408,2.289,409,2.394,410,2.394,411,3.34,412,3.029,413,1.289,414,1.502,415,1.812,416,1.821,417,2.485,418,1.812,419,2.562,420,2.663,421,1.502,422,1.387,423,1.612,424,1.64,425,2.289,426,1.834,427,1.717,428,1.502,429,1.387,430,1.502,431,1.502,432,2.381,433,1.203,434,1.387,435,2.289,436,1.64,437,2.499,438,1.289,439,1.502]],["title/injectables/AdminUserService.html",[15,2.093,440,1.262]],["body/injectables/AdminUserService.html",[14,0.022,15,2.367,19,0.146,20,0.131,21,0.131,27,0.534,28,0.472,30,0.933,31,1.793,32,1.224,33,1.527,34,1.803,42,0.146,43,0.01,44,0.01,45,0.012,51,0.941,52,2.268,54,1.664,55,2.507,56,0.178,57,1.093,58,3.07,60,2.268,61,2.268,69,2.325,74,1.945,78,1.325,80,0.592,93,0.94,96,1.947,97,1.393,98,1.044,99,1.298,101,1.959,102,3.603,103,2.507,106,2.053,111,2.367,114,3.169,115,2.356,116,2.507,118,1.298,119,2.268,120,1.112,125,3.107,127,2.761,142,1.599,146,1.225,147,2.681,165,1.559,167,2.268,171,1.919,173,1.377,174,2.078,178,2.525,183,2.078,190,1.224,197,1.907,198,1.137,208,1.447,209,1.599,210,1.447,211,1.447,217,1.225,221,1.224,222,1.665,223,3.809,225,1.137,226,2.2,227,2.87,228,1.803,229,1.803,244,3.012,256,2.902,262,1.953,265,0.878,266,1.061,267,2.793,268,2.912,270,1.061,272,2.55,276,2.902,284,1.601,291,1.298,294,1.559,321,3.949,323,2.491,324,1.559,337,4.289,339,2.827,340,1.325,365,3.442,366,3.442,367,3.652,368,3.652,369,2.089,370,2.22,371,3.001,372,2.078,373,1.325,383,1.664,388,1.061,389,2.053,393,1.463,406,1.783,407,2.491,420,2.491,422,1.919,423,0.933,427,0.994,434,1.919,437,2.268,438,2.491,439,1.325,440,1.157,441,1.137,442,4.758,443,1.803,444,2.507,445,3.312,446,1.919,447,1.803,448,3.497,449,3.487,450,2.112,451,2.827,452,2.112,453,2.112,454,2.112,455,3.312,456,2.112,457,3.312,458,2.112,459,3.949,460,1.447,461,4.086,462,4.626,463,2.112,464,1.061,465,1.447,466,1.664,467,1.803,468,2.827,469,2.112,470,2.112,471,2.112,472,3.312,473,2.112,474,2.112,475,2.112,476,1.803,477,2.112,478,2.112,479,3.312,480,2.112,481,2.112,482,2.112,483,2.112,484,1.803,485,2.112,486,2.112,487,2.112,488,2.112,489,3.312,490,2.112,491,1.803,492,2.112,493,2.112,494,2.112,495,2.112,496,2.112,497,2.112,498,2.112,499,2.112,500,2.112,501,2.112,502,2.112,503,2.491,504,2.112,505,2.112,506,1.803,507,2.112,508,3.487,509,1.803,510,2.268,511,1.803,512,3.312,513,1.803,514,1.803,515,1.803,516,1.599,517,1.599,518,4.086,519,2.827,520,2.112,521,1.599,522,2.827,523,1.599,524,3.312,525,4.626,526,3.312,527,3.312,528,2.112,529,3.312,530,2.112,531,2.112,532,2.112,533,2.112,534,3.312,535,2.112,536,2.112,537,2.112,538,3.312,539,2.112]],["title/controllers/AppController.html",[46,1.336,540,2.475]],["body/controllers/AppController.html",[14,0.022,19,0.367,20,0.328,21,0.328,23,2.078,27,0.58,28,1.184,42,0.367,43,0.016,44,0.018,45,0.018,46,2.319,56,0.448,57,2.07,72,1.566,93,0.935,101,1.751,120,1.175,216,2.855,217,1.961,222,1.656,540,4.294,541,4.526,542,5.889,543,5.303,544,3.868,545,4.526,546,5.303]],["title/modules/AppModule.html",[0,1.502,547,2.475]],["body/modules/AppModule.html",[0,2.607,1,4.329,2,2.309,3,2.309,4,2.663,5,2.663,6,2.309,7,3.634,8,2.663,14,0.022,16,3.33,17,2.663,18,2.309,19,0.318,20,0.284,21,0.284,23,2.252,26,3.606,27,0.66,28,1.026,29,2.883,30,2.031,42,0.318,43,0.014,44,0.017,45,0.017,291,2.252,540,4.295,544,3.998,545,3.923,547,4.976,548,3.923,549,3.923,550,3.923,551,4.329,552,4.329,553,4.596,554,4.596,555,4.596,556,3.148,557,6.272,558,4.596,559,4.596,560,4.596,561,4.596,562,4.596,563,4.596,564,4.596,565,4.596,566,4.596,567,3.923]],["title/injectables/AppService.html",[440,1.262,544,2.093]],["body/injectables/AppService.html",[14,0.022,19,0.348,20,0.311,21,0.311,27,0.465,28,1.123,42,0.348,43,0.018,44,0.018,45,0.018,51,1.138,56,0.425,57,2.005,93,0.887,101,2.238,120,1.223,208,3.444,222,1.57,423,2.996,429,2.914,440,2.122,441,2.707,444,4.598,542,5.786,544,3.782,568,4.292,569,6.075,570,5.571,571,5.029,572,6.075,573,6.527,574,5.029,575,5.029,576,5.029,577,5.029,578,5.029,579,5.029]],["title/controllers/AuthController.html",[46,1.336,580,2.475]],["body/controllers/AuthController.html",[14,0.022,19,0.291,20,0.26,21,0.26,23,1.65,27,0.588,28,0.94,42,0.291,43,0.016,44,0.016,45,0.016,46,2.227,49,2.642,51,1.317,56,0.356,57,1.795,58,2.834,72,1.244,79,3.411,80,0.496,87,4.116,93,0.743,96,1.471,97,1.053,98,0.789,101,2.101,102,2.928,108,3.724,117,2.268,146,2.011,175,2.885,176,2.642,178,2.116,180,2.642,181,2.885,199,2.642,200,3.411,201,3.778,206,1.244,216,2.268,217,1.557,218,2.642,219,3.724,222,1.88,262,1.994,360,3.595,383,3.449,580,4.124,581,4.641,582,4.212,583,3.724,584,4.124,585,4.641,586,3.595,587,4.307,588,4.212,589,5.438,590,3.909,591,4.212,592,4.212,593,4.212,594,4.641,595,4.133,596,4.641,597,4.559,598,3.489,599,3.595,600,3.595,601,3.188,602,3.595,603,2.642,604,4.212,605,4.212,606,4.212,607,4.212,608,4.212]],["title/modules/AuthModule.html",[0,1.502,551,2.267]],["body/modules/AuthModule.html",[0,2.545,2,2.191,3,2.191,4,2.526,5,2.526,6,2.191,7,3.547,8,3.547,14,0.022,16,3.222,17,2.526,18,2.191,19,0.302,20,0.27,21,0.27,23,2.179,26,2.735,27,0.663,28,0.973,29,2.735,30,1.927,31,1.288,32,2.526,41,3.301,42,0.302,43,0.013,44,0.016,45,0.016,191,3.625,193,2.986,194,3.52,551,4.525,556,2.986,567,3.722,580,4.192,598,3.945,599,3.722,609,3.722,610,3.722,611,3.722,612,4.271,613,4.36,614,5.56,615,2.986,616,5.56,617,2.986,618,4.36,619,4.36,620,4.36,621,5.502,622,4.36,623,4.36,624,4.36,625,4.36,626,3.722,627,4.36,628,4.36,629,4.36,630,4.36]],["title/injectables/AuthService.html",[440,1.262,598,2.093]],["body/injectables/AuthService.html",[14,0.022,19,0.261,20,0.234,21,0.234,27,0.618,28,0.844,30,1.67,31,1.116,32,2.19,33,1.248,42,0.261,43,0.015,44,0.015,45,0.015,51,1.07,56,0.319,57,1.672,58,2.687,69,1.899,74,1.878,80,0.596,85,3.226,93,0.893,96,1.769,97,1.266,98,0.949,101,1.672,102,2.726,117,2.035,178,1.899,197,1.116,210,3.468,217,1.872,221,2.19,222,1.18,223,3.582,225,2.035,226,3.074,227,3.424,244,2.523,262,1.943,265,2.105,272,1.67,294,1.779,383,3.36,440,1.769,441,2.035,444,3.833,446,2.934,448,3.827,460,2.589,464,1.899,465,2.589,466,2.544,484,3.226,506,3.226,508,3.226,510,2.589,523,2.861,583,3.468,584,3.911,586,4.322,587,4.107,590,3.535,594,4.322,595,3.99,596,5.429,597,3.833,598,3.309,600,3.226,601,2.861,603,2.371,615,2.589,631,3.226,632,3.78,633,5.707,634,3.78,635,4.322,636,3.78,637,5.064,638,4.323,639,3.226,640,3.833,641,3.78,642,3.226,643,3.78,644,4.322,645,5.064,646,3.78,647,3.226,648,3.226,649,3.226,650,2.861,651,3.226,652,3.226,653,2.861,654,2.861,655,3.78,656,3.78,657,3.78,658,3.78,659,3.78,660,3.78]],["title/classes/CreateProductDto.html",[43,0.011,71,2.267]],["body/classes/CreateProductDto.html",[14,0.022,19,0.178,20,0.159,21,0.159,27,0.474,42,0.178,43,0.014,44,0.011,45,0.011,51,1.318,56,0.218,71,2.419,72,2.029,74,1.139,77,3.334,80,0.814,93,1.211,97,1.374,98,1.295,120,1.279,143,2.234,144,2.234,151,2.234,156,2.234,161,2.973,206,0.761,257,1.009,263,0.861,273,3.945,284,2.41,289,3.858,290,3.581,291,2.26,298,1.704,299,1.603,302,2.959,304,1.138,305,2.829,306,2.557,308,0.899,309,3.945,310,1.386,311,3.447,318,2.268,386,2.274,413,1.386,414,1.616,432,2.763,661,5.898,662,1.949,663,3.764,664,3.499,665,3.448,666,4.16,667,3.499,668,3.499,669,3.166,670,3.166,671,3.166,672,3.166,673,3.764,674,4.096,675,4.16,676,4.16,677,3.499,678,2.919,679,1.949,680,2.575,681,2.919,682,2.919,683,3.291,684,3.291,685,3.291,686,3.291,687,3.291,688,2.198,689,2.575,690,3.184,691,2.575,692,2.575,693,3.885,694,3.291,695,2.575,696,3.291,697,3.291,698,4.366,699,3.945,700,3.291,701,3.291,702,2.575,703,2.575,704,2.919,705,2.198,706,2.198,707,2.641,708,2.919,709,2.198,710,4.38,711,2.575,712,4.212,713,4.38,714,2.575,715,2.575,716,2.575,717,2.575,718,3.219,719,1.949,720,2.575,721,3.291,722,2.575,723,2.575,724,2.575,725,2.198,726,2.575,727,2.419,728,2.198,729,2.575,730,2.919,731,2.919,732,2.575,733,2.575,734,3.499,735,3.885,736,4.38,737,3.291,738,3.291,739,2.575,740,1.616,741,1.616,742,2.198,743,2.198,744,3.499,745,2.198,746,2.198,747,1.949,748,2.198,749,1.949,750,2.198,751,2.198,752,1.949,753,2.198,754,2.198,755,2.198,756,2.198,757,2.198,758,2.198,759,2.198,760,1.949,761,2.198]],["title/classes/CreateUserDto.html",[43,0.011,762,2.093]],["body/classes/CreateUserDto.html",[14,0.022,19,0.236,20,0.211,21,0.211,27,0.501,42,0.236,43,0.014,44,0.014,45,0.014,51,1.243,56,0.288,72,1.96,80,0.782,92,3.334,93,1.17,97,1.462,98,1.243,120,1.302,197,2.014,198,1.838,206,1.008,257,1.338,259,2.339,262,1.968,263,1.055,264,4.102,265,2.553,266,2.723,270,2.723,271,4.614,272,2.806,275,2.914,277,4.991,280,3.237,281,4.033,289,4.163,290,3.539,294,2.224,298,1.876,299,1.965,303,3.237,304,1.509,305,2.713,306,2.64,308,1.193,309,4.226,317,2.142,318,2.584,333,3.68,411,2.965,423,2.584,707,3.237,734,4.648,762,2.738,763,5.75,764,4.205,765,4.102,766,5.848,767,4.726,768,5.419,769,3.415,770,4.726,771,4.726,772,4.726,773,3.415,774,3.415,775,3.415,776,3.415,777,4.726,778,4.726,779,3.415,780,3.415,781,3.415,782,5.848,783,4.726,784,3.415,785,4.033,786,3.415,787,4.726,788,4.033,789,4.726,790,3.415,791,3.415,792,3.415,793,2.914,794,3.415,795,3.415,796,3.415,797,2.914]],["title/classes/HttpExceptionFilter.html",[43,0.011,798,2.735]],["body/classes/HttpExceptionFilter.html",[14,0.022,19,0.305,20,0.273,21,0.273,27,0.518,28,0.984,42,0.305,43,0.013,44,0.016,45,0.016,56,0.373,57,1.849,74,1.817,80,0.519,84,2.814,93,0.987,96,1.54,97,1.102,98,0.826,101,1.456,120,0.826,146,2.394,180,2.766,217,2.275,225,3.313,226,2.374,244,3.017,257,1.728,263,1.25,333,2.555,386,1.631,387,2.374,423,1.949,426,3.092,466,3.092,798,4.239,799,5.252,800,3.02,801,3.513,802,4.658,803,4.9,804,5.6,805,4.41,806,4.239,807,6.474,808,4.658,809,4.9,810,4.41,811,4.239,812,3.764,813,2.766,814,4.41,815,3.338,816,3.338,817,3.338,818,3.338,819,3.338,820,5.058,821,3.338,822,3.338,823,3.338,824,4.239,825,4.239,826,3.338,827,3.338,828,3.338,829,2.766,830,3.338,831,3.338,832,3.338,833,3.338,834,3.338,835,4.41,836,4.41,837,4.41,838,3.338]],["title/injectables/JwtAuthGuard.html",[191,1.815,440,1.262]],["body/injectables/JwtAuthGuard.html",[14,0.022,19,0.436,20,0.253,21,0.253,27,0.582,28,0.915,42,0.283,43,0.016,44,0.016,45,0.016,51,1.001,56,0.346,57,1.764,74,1.21,80,0.629,84,2.684,93,1.048,96,2.076,97,1.485,98,1.113,101,1.764,118,1.606,191,2.986,217,1.975,222,1.856,227,2.876,244,1.811,262,1.825,291,1.606,315,1.928,341,4.313,440,1.866,441,2.206,446,3.095,466,2.684,584,4.07,590,3.88,595,3.951,602,4.559,615,2.807,617,2.807,633,5.716,638,3.102,644,3.498,785,4.559,839,3.498,840,3.659,841,5.342,842,4.559,843,4.499,844,5.342,845,4.559,846,5.342,847,4.098,848,5.821,849,4.098,850,4.559,851,5.375,852,4.098,853,3.498,854,5.342,855,4.098,856,5.943,857,5.342,858,3.102,859,4.098,860,4.098,861,4.044,862,3.498,863,3.102,864,3.102,865,3.102,866,5.342,867,4.098,868,3.498,869,3.498,870,4.098,871,4.098,872,4.098,873,4.098,874,4.098,875,4.098,876,4.098]],["title/interfaces/JwtPayload.html",[416,1.128,877,2.475]],["body/interfaces/JwtPayload.html",[14,0.022,19,0.328,20,0.293,21,0.293,42,0.328,44,0.017,45,0.017,51,0.888,56,0.4,80,0.838,98,1.098,120,1.367,127,2.436,197,2.054,262,1.637,263,1.308,265,2.891,276,4.167,280,4.013,298,1.962,314,2.552,416,1.829,590,2.746,595,3.675,653,3.588,654,5.029,829,3.675,877,4.013,878,2.552,879,4.045,880,4.045,881,4.045,882,6.643,883,5.859,884,5.001,885,5.859]],["title/injectables/JwtStrategy.html",[440,1.262,612,2.267]],["body/injectables/JwtStrategy.html",[14,0.022,19,0.261,20,0.233,21,0.233,27,0.636,28,0.841,30,1.665,31,1.113,32,2.184,33,1.244,42,0.261,43,0.015,44,0.015,45,0.015,51,1.068,56,0.318,57,1.669,58,2.683,69,1.894,74,1.8,80,0.672,84,2.54,93,1.005,96,1.765,97,1.263,98,0.947,101,1.669,117,2.029,125,2.029,127,2.101,173,2.101,178,1.894,217,1.869,222,1.177,223,3.171,227,3.07,244,2.52,262,1.775,272,1.665,294,1.774,318,1.665,383,1.894,416,1.177,440,1.765,441,2.029,446,2.929,448,3.823,460,2.581,464,1.894,465,2.581,466,2.54,468,4.314,510,2.581,523,2.853,556,2.581,583,3.462,584,3.906,590,4.027,595,3.171,612,3.577,617,2.581,621,5.583,626,3.217,635,4.867,638,2.853,642,3.217,648,4.314,649,3.217,650,2.853,651,3.217,652,3.217,653,5.207,654,2.853,801,2.364,843,3.826,861,2.853,862,3.217,877,4.48,886,3.217,887,6.093,888,5.054,889,5.054,890,6.093,891,5.054,892,3.769,893,3.769,894,5.054,895,3.769,896,5.054,897,5.054,898,3.769,899,3.769,900,4.314,901,3.769,902,3.769,903,3.217,904,5.703,905,3.769,906,3.769,907,2.853,908,3.769,909,3.769,910,3.769,911,3.769,912,2.364]],["title/classes/LoginDto.html",[43,0.011,587,2.267]],["body/classes/LoginDto.html",[14,0.022,19,0.317,20,0.283,21,0.283,27,0.53,42,0.317,43,0.018,44,0.017,45,0.017,51,1.23,56,0.387,72,1.694,80,0.773,93,1.011,99,2.247,120,1.292,206,1.353,257,1.795,260,3.323,261,2.534,262,1.926,263,1.28,265,2.909,276,4.117,280,4.495,289,3.598,290,3.298,303,3.928,306,2.385,308,1.6,309,3.928,313,2.654,314,2.466,315,2.155,316,2.654,383,3.146,587,3.928,734,4.342,764,4.791,797,3.909,913,3.909,914,4.58,915,4.58,916,4.58,917,4.58,918,4.58,919,3.909,920,4.58,921,4.58]],["title/interfaces/PaginatedResponse.html",[416,1.128,427,1.7]],["body/interfaces/PaginatedResponse.html",[14,0.022,19,0.208,20,0.186,21,0.186,27,0.511,31,1.276,42,0.35,43,0.016,44,0.015,45,0.013,51,1.31,54,2.171,56,0.254,80,0.838,98,0.563,99,1.981,106,1.511,115,2.587,118,2.166,120,1.226,146,1.87,165,2.033,173,1.25,197,1.897,206,0.888,258,1.887,260,1.743,261,1.329,262,1.544,263,0.965,265,2.102,266,2.171,267,1.415,268,1.743,270,2.171,272,2.442,284,2.294,287,2.06,294,2.033,298,2.116,299,2.102,302,2.722,304,1.329,305,3.028,306,2.298,308,1.05,310,1.619,311,3.689,313,1.743,314,1.619,315,1.415,316,1.743,317,1.887,323,2.326,363,1.743,364,3.271,365,2.06,366,2.06,367,2.06,368,2.06,369,1.796,370,2.97,371,2.722,372,1.887,373,1.887,374,4.481,375,3.271,383,2.171,386,2.165,388,2.541,389,3.378,390,2.722,393,2.234,399,2.959,402,2.959,403,1.743,406,2.326,407,2.722,408,1.887,411,3.673,412,3.463,413,1.619,414,1.887,415,2.277,416,2.006,417,3.063,418,2.277,419,3.203,420,2.976,421,1.887,422,1.743,423,1.909,424,2.06,425,3.172,426,2.541,427,2.38,428,1.887,429,1.743,430,1.887,431,1.887,432,3.152,433,2.171,434,3.203,435,2.711,436,2.06,437,2.959,438,1.619,439,1.887,878,1.619]],["title/interfaces/PaginatedResponse-1.html",[393,1.337,416,0.945,427,1.424]],["body/interfaces/PaginatedResponse-1.html",[14,0.022,19,0.313,20,0.279,21,0.279,42,0.393,44,0.017,45,0.017,51,1.066,56,0.382,80,0.838,99,2.693,115,2.513,118,2.229,263,1.27,298,2.141,369,1.879,370,2.974,389,3.382,390,2.433,416,2.145,417,3.382,419,3.606,420,3.351,421,2.835,422,2.619,425,3.904,426,3.127,427,2.929,428,2.835,429,2.619,430,2.835,431,2.835,432,3.624,433,2.858,434,3.785,878,2.433,922,3.421,923,3.421]],["title/interfaces/PaginationMeta.html",[416,1.128,417,1.815]],["body/interfaces/PaginationMeta.html",[14,0.022,19,0.201,20,0.179,21,0.179,27,0.502,31,1.243,42,0.343,43,0.016,44,0.015,45,0.012,51,1.303,54,2.114,56,0.245,80,0.843,98,1.018,99,1.649,106,1.457,115,2.659,118,2.261,120,1.25,146,1.831,165,1.98,173,1.205,197,1.879,206,0.856,258,1.818,260,1.68,261,1.281,262,1.518,263,0.939,265,2.059,266,2.114,267,1.364,268,1.68,270,2.114,272,2.401,284,2.261,287,1.985,294,1.98,298,2.161,299,2.059,302,2.666,304,1.281,305,3.008,306,2.259,308,1.012,310,1.561,311,3.665,313,1.68,314,1.561,315,1.364,316,1.68,317,1.818,323,2.265,363,1.68,364,3.185,365,1.985,366,1.985,367,1.985,368,1.985,369,2.399,370,3.054,371,2.666,372,1.818,373,1.818,374,4.441,375,3.185,383,2.114,386,2.134,388,2.489,389,3.258,390,2.925,393,2.188,399,2.882,402,2.882,403,1.68,406,2.265,407,2.666,408,1.818,411,3.62,412,3.392,413,1.561,414,1.818,415,2.194,416,1.986,417,2.899,418,2.194,419,3.148,420,3.491,421,2.639,422,3.148,423,2.659,424,2.882,425,2.639,426,2.114,427,1.98,428,1.818,429,1.68,430,1.818,431,1.818,432,2.666,433,1.457,434,1.68,435,2.639,436,1.985,437,2.882,438,1.561,439,1.818,878,1.561]],["title/interfaces/PaginationMeta-1.html",[393,1.337,416,0.945,417,1.521]],["body/interfaces/PaginationMeta-1.html",[14,0.022,19,0.303,20,0.27,21,0.27,42,0.385,44,0.016,45,0.016,51,1.044,56,0.37,80,0.845,99,2.183,115,2.462,118,2.183,263,1.244,298,2.196,369,2.683,370,3.127,389,3.424,390,2.999,416,2.127,417,3.243,419,3.552,420,3.774,421,3.495,422,3.74,425,3.495,426,2.799,427,2.622,428,2.744,429,2.535,430,2.744,431,2.744,432,3.3,433,2.198,434,2.535,878,2.355,922,3.311,923,3.311]],["title/entities/Product.html",[77,1.7,924,1.945]],["body/entities/Product.html",[14,0.022,19,0.132,20,0.118,21,0.118,27,0.353,42,0.132,43,0.009,44,0.009,45,0.009,51,1.309,56,0.161,72,2.012,74,0.901,77,3.418,78,1.195,80,0.865,93,1.201,97,1.339,120,1.256,127,1.588,143,1.769,144,1.769,147,1.104,151,1.769,156,1.769,161,1.769,165,1.436,173,0.792,206,0.563,261,1.349,263,0.681,267,1.797,272,2.459,284,2.73,289,4.273,291,2.692,294,1.436,298,1.991,299,2.12,309,4.292,318,2.707,324,2.399,333,3.224,386,2.668,388,2.194,419,1.769,433,2.562,438,2.056,464,0.957,503,3.298,513,1.626,603,1.195,663,3.273,664,2.891,665,2.998,666,3.617,667,2.891,668,3.617,669,2.615,670,2.615,671,2.615,672,2.615,673,3.273,674,3.668,675,3.617,676,3.617,677,2.891,681,2.31,682,2.31,690,2.954,693,3.86,704,2.31,708,2.31,712,4.033,718,2.396,727,1.915,730,2.31,731,2.31,740,1.195,741,1.195,881,2.605,924,2.351,925,1.305,926,1.626,927,3.052,928,3.052,929,3.052,930,3.052,931,3.052,932,3.052,933,4.778,934,3.819,935,3.259,936,3.819,937,5.565,938,5.228,939,5.686,940,3.819,941,1.905,942,1.905,943,1.905,944,1.905,945,3.819,946,1.905,947,1.905,948,1.905,949,3.052,950,1.905,951,3.052,952,1.905,953,6.015,954,3.819,955,5.099,956,5.099,957,5.099,958,1.905,959,2.31,960,2.605,961,1.905,962,1.905,963,1.905,964,3.052,965,1.905,966,4.367,967,1.905,968,1.905,969,1.905,970,1.905,971,1.905,972,1.905,973,1.905,974,1.905,975,1.905,976,3.052,977,4.367,978,2.605,979,1.905,980,3.052,981,5.099,982,5.099,983,1.905,984,1.905,985,3.052,986,3.052,987,3.052,988,1.905,989,1.905,990,1.905,991,1.905,992,3.052,993,3.052,994,1.905,995,5.008,996,1.442,997,2.605,998,2.605,999,1.905,1000,1.905,1001,1.905,1002,1.905,1003,1.626,1004,1.626,1005,1.905,1006,1.626,1007,3.727,1008,3.819]],["title/controllers/ProductController.html",[46,1.336,1009,2.475]],["body/controllers/ProductController.html",[14,0.022,19,0.125,20,0.112,21,0.112,23,0.71,27,0.548,28,0.404,33,0.598,42,0.125,43,0.009,44,0.009,45,0.009,46,1.365,49,1.136,51,1.365,53,5.327,56,0.153,57,0.968,58,2.969,59,2.661,60,2.007,61,2.007,63,2.501,69,2.131,70,1.546,71,3.291,72,1.712,74,1.712,75,3.15,76,2.219,77,3.386,78,2.315,79,3.291,80,0.778,82,3.21,83,3.21,84,1.473,87,3.773,88,2.794,89,4.253,90,3.21,92,2.912,93,1.022,95,2.501,96,2.11,97,1.595,98,1.167,99,1.662,100,2.501,101,2.242,102,3.12,104,2.661,105,1.241,106,2.34,108,3.741,109,3.62,111,2.888,114,2.905,115,1.874,117,2.507,118,1.148,119,1.241,120,1.057,121,1.241,122,1.241,124,3.773,125,2.94,127,2.78,131,2.794,133,1.546,135,2.794,136,2.501,138,2.501,143,2.457,144,2.457,146,2.458,147,2.457,151,2.457,156,2.457,160,1.546,161,2.457,167,1.241,168,3.54,171,1.698,174,1.839,175,2.007,176,1.839,177,1.241,178,2.636,179,1.241,180,1.136,181,1.241,182,1.371,184,2.315,187,2.501,190,1.05,191,0.91,193,1.241,194,2.131,197,0.535,198,0.975,199,1.136,200,3.718,201,4.195,202,2.007,203,3.773,204,1.371,205,3.21,206,0.535,214,2.794,215,2.794,216,0.975,217,0.67,218,3.636,219,2.528,220,1.546,222,2.061,224,1.546,230,1.371,234,1.241,235,1.371,236,1.546,237,1.241,239,1.546,240,1.546,241,1.546,242,1.546,298,2.045,299,1.218,318,2.561,324,2.192,328,2.501,341,1.241,342,1.546,343,1.546,347,3.975,369,2.78,583,2.007,585,1.546,601,1.371,603,1.136,665,3.426,690,2.888,740,1.136,741,1.136,864,1.371,919,2.501,1003,2.501,1004,1.546,1009,2.528,1010,1.546,1011,2.931,1012,2.931,1013,2.931,1014,2.931,1015,2.931,1016,3.691,1017,1.811,1018,3.691,1019,1.546,1020,2.931,1021,1.811,1022,1.811,1023,1.811,1024,1.811,1025,1.811,1026,1.811,1027,2.931,1028,1.811,1029,3.691,1030,4.657,1031,1.811,1032,4.657,1033,1.811,1034,1.811,1035,1.811,1036,1.811,1037,2.931,1038,1.811,1039,1.811,1040,1.811,1041,2.931,1042,1.811,1043,1.811,1044,1.811,1045,1.811,1046,1.811,1047,1.811,1048,1.811,1049,1.811,1050,1.811,1051,1.811,1052,1.811,1053,1.546,1054,1.371,1055,1.371,1056,1.811,1057,1.811,1058,1.811,1059,1.811,1060,1.811,1061,1.811,1062,1.811,1063,1.811,1064,1.811,1065,1.811,1066,1.546,1067,1.811,1068,1.811,1069,1.546,1070,1.811,1071,1.811,1072,1.811,1073,1.811,1074,1.811,1075,1.811,1076,1.811,1077,1.811,1078,1.811]],["title/classes/ProductQueryDto.html",[43,0.011,104,2.267]],["body/classes/ProductQueryDto.html",[14,0.022,19,0.135,20,0.12,21,0.12,27,0.409,42,0.135,43,0.013,44,0.009,45,0.009,51,1.268,53,5.217,56,0.165,72,1.914,74,1.306,77,2.543,80,0.848,93,1.143,96,1.086,97,1.106,98,1.316,99,1.218,104,2.432,106,1.948,111,1.801,115,2.135,120,1.245,143,2.563,144,1.801,151,2.563,156,1.801,161,2.563,206,0.576,222,1.752,257,0.764,260,1.801,261,1.373,263,0.694,273,4.066,284,2.539,290,3.313,291,1.733,298,2.018,299,1.839,302,2.602,304,0.861,305,2.89,306,2.333,308,0.681,310,1.049,311,3.521,313,1.129,314,1.049,315,0.917,316,1.129,324,3.05,363,1.129,369,1.612,370,2.675,371,2.909,372,2.432,373,2.432,374,4.924,381,1.663,386,2.457,387,3.577,388,2.428,389,2.223,390,2.381,393,2.479,399,3.03,402,3.843,403,2.563,406,3.318,407,3.114,408,2.775,413,1.049,414,1.223,435,1.95,436,1.335,438,1.049,491,1.663,663,3.701,665,3.39,669,2.655,670,2.655,671,2.655,672,2.655,673,3.701,674,3.961,678,2.353,679,1.475,690,2.563,698,2.353,718,1.223,719,2.353,735,3.658,740,1.223,741,1.223,744,2.353,747,1.475,749,1.475,752,1.475,760,1.475,1066,2.653,1069,2.653,1079,5.582,1080,5.404,1081,3.877,1082,3.877,1083,5.404,1084,1.949,1085,1.949,1086,1.949,1087,1.949,1088,4.424,1089,4.424,1090,1.949,1091,1.949,1092,1.949,1093,1.949,1094,5.611,1095,5.15,1096,1.949,1097,1.949,1098,1.949,1099,1.949,1100,1.949,1101,1.949,1102,1.949,1103,1.949,1104,1.949,1105,1.949,1106,1.949,1107,1.949,1108,1.949,1109,1.949,1110,1.949,1111,1.949,1112,4.833,1113,1.949,1114,1.949]],["title/modules/ProductsModule.html",[0,1.502,13,2.267]],["body/modules/ProductsModule.html",[0,2.69,2,2.476,3,2.476,4,2.856,5,2.856,6,2.476,7,3.749,8,3.749,13,4.457,14,0.022,16,3.477,17,2.856,18,2.476,19,0.341,20,0.305,21,0.305,23,2.351,25,3.092,26,3.092,27,0.649,28,1.1,29,3.092,30,2.178,40,4.206,42,0.341,43,0.014,44,0.018,45,0.018,77,2.319,184,4.598,1009,4.431,1053,4.206,1115,4.206,1116,4.206,1117,4.206,1118,4.929,1119,4.929,1120,4.929,1121,4.929,1122,4.929]],["title/entities/Roles.html",[33,1.193,924,1.945]],["body/entities/Roles.html",[14,0.022,19,0.337,20,0.301,21,0.301,27,0.595,31,2.093,32,2.82,33,1.966,42,0.337,43,0.014,44,0.018,45,0.018,56,0.411,72,1.9,80,0.79,93,1.134,97,1.608,127,2.675,197,2.031,262,1.664,263,1.329,291,2.333,298,1.759,299,2.787,464,2.445,521,4.508,924,3.206,925,3.333,959,4.508,995,4.508,996,4.871,1123,4.154,1124,4.867,1125,4.154,1126,4.867,1127,4.154,1128,4.867,1129,5.083,1130,4.154]],["title/guards/RolesGuard.html",[194,1.815,840,2.475]],["body/guards/RolesGuard.html",[14,0.022,19,0.304,20,0.272,21,0.272,27,0.568,28,0.981,31,1.298,33,2.253,42,0.387,43,0.013,44,0.016,45,0.016,56,0.371,57,1.845,74,1.65,80,0.658,92,3.087,93,0.985,96,1.952,97,1.397,98,1.047,101,1.451,194,2.808,197,1.298,198,2.366,216,2.366,222,1.745,227,3.009,244,2.857,262,1.865,284,2.19,291,2.19,440,1.952,446,2.547,503,2.366,521,3.327,597,3.327,801,2.758,845,5.518,848,5.823,850,4.77,851,5.518,853,3.752,858,3.327,863,3.327,868,3.752,869,3.752,1131,4.396,1132,3.327,1133,4.396,1134,4.396,1135,4.396,1136,5.589,1137,3.327,1138,5.589,1139,4.396,1140,4.396,1141,3.752,1142,4.396,1143,4.396,1144,4.396,1145,4.396,1146,4.396,1147,4.396,1148,5.589,1149,4.396,1150,4.396,1151,4.396,1152,4.396,1153,4.396,1154,4.396,1155,4.396]],["title/classes/UpdateProductDto.html",[43,0.011,168,2.267]],["body/classes/UpdateProductDto.html",[14,0.022,19,0.171,20,0.153,21,0.153,27,0.417,42,0.171,43,0.011,44,0.011,45,0.011,51,1.317,56,0.209,72,2.029,74,1.106,77,3.34,80,0.809,93,1.211,97,1.351,98,1.358,120,1.27,143,2.17,144,2.17,151,2.17,156,2.17,161,2.916,165,1.762,168,2.349,206,0.732,257,0.971,263,0.836,267,2.125,273,4.31,284,2.485,290,3.566,291,1.972,298,1.679,299,1.557,302,3.06,304,1.094,305,3.052,306,2.527,308,0.865,311,3.719,318,2.224,386,2.345,413,1.334,432,2.709,662,1.875,663,3.701,664,3.418,665,3.39,666,4.091,667,3.418,668,3.418,669,3.092,670,3.092,671,3.092,672,3.092,673,3.701,674,4.042,675,4.091,676,4.091,677,3.418,678,2.835,679,1.875,681,2.835,682,2.835,683,3.196,684,3.196,685,3.196,686,3.196,687,3.196,688,2.114,690,3.131,693,3.809,694,3.196,696,3.196,697,3.196,698,4.303,699,3.853,700,3.196,701,3.196,704,2.835,705,2.114,706,2.114,707,2.565,708,2.835,709,2.114,710,4.295,712,4.343,713,4.295,718,3.157,719,1.875,721,3.196,725,2.114,727,2.349,728,2.114,730,2.835,731,2.835,735,3.809,736,4.295,737,3.196,738,3.196,740,1.554,741,1.554,742,2.114,743,2.114,744,3.418,745,2.114,746,2.114,747,1.875,748,2.114,749,1.875,750,2.114,751,2.114,752,1.875,753,2.114,754,2.114,755,2.114,756,2.114,757,2.114,758,2.114,759,2.114,760,1.875,761,2.114,1156,5.896,1157,2.477,1158,2.477,1159,2.477,1160,2.477,1161,4.515,1162,2.477,1163,2.477,1164,2.477,1165,2.477,1166,2.477,1167,2.477,1168,2.477,1169,2.477,1170,2.477,1171,2.477,1172,2.477,1173,2.477,1174,2.477,1175,2.477,1176,2.477,1177,2.477,1178,2.477,1179,2.477]],["title/classes/UpdateUserDto.html",[43,0.011,354,2.093]],["body/classes/UpdateUserDto.html",[14,0.022,19,0.373,20,0.334,21,0.334,27,0.622,42,0.373,43,0.019,44,0.019,45,0.019,59,3.386,206,1.594,257,2.115,259,3.697,303,3.697,304,2.385,305,2.385,306,2.244,308,1.885,340,3.386,354,3.671,411,3.386,762,3.127,793,4.606,843,4.796,1180,4.606,1181,6.336,1182,5.397]],["title/classes/UserQueryDto.html",[43,0.011,1183,2.267]],["body/classes/UserQueryDto.html",[14,0.022,19,0.3,20,0.268,21,0.268,27,0.512,42,0.3,43,0.016,44,0.016,45,0.016,56,0.367,72,1.964,80,0.783,93,1.172,98,1.038,120,1.206,257,1.7,263,1.237,298,2.008,304,1.917,305,3.005,306,2.539,308,1.516,363,2.514,369,2.765,370,2.938,371,3.288,386,2.38,387,3.465,388,2.785,393,3.005,412,4.183,413,2.336,423,2.843,435,3.477,1183,3.477,1184,5.804,1185,5.213,1186,5.213,1187,5.543,1188,6.435,1189,6.435,1190,4.34,1191,5.543,1192,5.543,1193,4.34,1194,5.213,1195,5.543,1196,4.34,1197,4.34,1198,4.34,1199,4.34,1200,3.704,1201,4.34,1202,4.34]],["title/entities/Users.html",[31,1.067,924,1.945]],["body/entities/Users.html",[14,0.022,19,0.225,20,0.201,21,0.201,27,0.423,31,1.351,33,2.122,42,0.225,43,0.01,44,0.013,45,0.013,56,0.275,72,2.089,80,0.86,93,1.247,98,1.074,120,1.325,127,2.198,197,1.351,263,1.021,264,4.001,265,2.198,266,2.656,267,2.487,268,3.063,269,4.511,270,2.656,271,3.62,272,2.899,284,2.701,291,2.741,318,2.765,386,2.426,438,2.846,439,3.316,464,1.638,764,3.62,765,4.001,829,2.87,924,2.463,925,2.232,935,4.511,938,5.969,939,5.766,959,4.338,995,5.294,996,2.467,997,4.511,998,4.511,1006,3.905,1007,5.969,1125,5.829,1127,2.782,1129,3.905,1203,2.782,1204,5.286,1205,3.26,1206,3.26,1207,6.994,1208,3.26,1209,3.26,1210,3.26,1211,3.26,1212,3.26,1213,3.26,1214,3.26,1215,3.26,1216,3.26,1217,3.26,1218,3.905,1219,3.26,1220,3.26,1221,3.26,1222,3.26,1223,3.26,1224,4.575,1225,3.26,1226,3.26]],["title/controllers/UsersController.html",[46,1.336,1227,2.475]],["body/controllers/UsersController.html",[14,0.022,19,0.221,20,0.197,21,0.197,23,1.25,27,0.575,28,0.712,31,1.677,42,0.221,43,0.009,44,0.013,45,0.013,46,1.18,49,2.002,51,1.351,56,0.27,57,1.488,58,3.231,59,3.278,69,2.625,72,1.677,73,2.723,74,1.543,76,3.411,78,2.002,79,3.562,80,0.669,82,3.411,83,3.411,84,2.264,92,2.853,93,1.001,96,1.983,97,1.631,98,1.064,101,1.874,105,2.185,108,4.257,111,1.849,117,3.057,120,1.164,121,2.185,122,3.087,124,4.298,125,3.057,127,2.855,135,2.415,146,2.362,147,1.849,169,2.415,173,1.874,175,3.087,176,2.827,177,2.185,178,1.603,179,2.185,190,1.849,199,2.002,200,3.757,201,4.093,202,3.579,203,3.955,206,0.942,211,2.185,216,1.718,217,1.18,218,3.562,222,2.037,234,2.185,237,2.185,238,2.415,262,2.014,298,1.543,318,2.509,325,2.415,327,3.846,340,2.827,354,3.781,369,1.874,370,2.746,389,2.264,390,2.426,762,3.601,864,2.415,865,4.298,1019,2.723,1054,2.415,1055,2.415,1183,3.899,1227,3.087,1228,2.723,1229,3.846,1230,3.846,1231,3.846,1232,4.459,1233,2.723,1234,3.191,1235,2.723,1236,3.191,1237,3.191,1238,3.191,1239,3.191,1240,2.723,1241,3.191,1242,3.191,1243,2.723,1244,3.191,1245,3.191,1246,3.191,1247,3.191,1248,3.027,1249,2.723,1250,2.723,1251,3.191,1252,3.191,1253,3.191,1254,3.191,1255,3.191,1256,3.191,1257,2.415,1258,3.191,1259,3.191,1260,3.191]],["title/modules/UsersModule.html",[0,1.502,552,2.267]],["body/modules/UsersModule.html",[0,2.714,2,2.527,3,2.527,4,2.914,5,2.914,6,2.527,7,3.782,8,2.914,14,0.022,16,3.52,17,2.914,18,2.527,19,0.348,20,0.311,21,0.311,23,2.38,26,3.155,27,0.652,28,1.123,29,3.155,30,2.222,31,1.485,33,2.005,41,3.807,42,0.348,43,0.015,44,0.018,45,0.018,552,4.424,1227,4.47,1248,4.086,1249,4.292,1261,4.292,1262,4.292,1263,5.029,1264,5.029,1265,4.292,1266,4.292]],["title/injectables/UsersService.html",[440,1.262,1248,2.093]],["body/injectables/UsersService.html",[14,0.022,19,0.174,20,0.156,21,0.156,27,0.589,28,0.562,30,1.113,31,1.607,33,1.675,42,0.174,43,0.007,44,0.011,45,0.011,56,0.213,57,1.252,58,3.241,59,2.379,69,2.874,74,1.935,80,0.699,93,1.046,96,2.073,97,1.527,98,1.112,101,1.888,102,3.528,120,1.29,125,3.079,127,2.863,183,1.58,190,1.459,197,1.499,221,2.94,222,1.786,223,4.198,225,2.732,226,2.732,227,3.482,244,2.895,262,1.924,265,1.896,266,1.265,270,1.265,271,3.475,298,0.744,324,1.185,325,1.906,340,2.379,354,3.539,369,1.896,370,1.675,371,2.041,386,1.402,388,2.55,393,1.675,406,2.041,407,2.041,408,1.58,420,2.041,440,1.324,441,1.356,446,2.197,447,2.149,448,3.723,449,3.892,451,3.236,459,4.331,460,1.725,464,1.265,465,1.725,466,1.905,467,2.149,476,2.149,503,1.356,509,4.645,510,2.597,511,2.149,514,2.149,515,2.149,517,2.87,519,2.149,522,3.892,639,2.149,640,2.87,647,2.149,707,3.123,762,3.439,764,4.183,765,4.12,788,3.236,912,1.58,1054,1.906,1055,1.906,1130,2.149,1183,3.588,1185,3.236,1186,2.149,1218,2.149,1229,3.236,1230,3.236,1231,3.236,1232,3.236,1233,3.236,1235,3.236,1240,3.236,1243,3.236,1248,2.197,1250,2.149,1265,2.149,1266,2.149,1267,2.149,1268,3.792,1269,3.792,1270,2.518,1271,3.792,1272,2.518,1273,2.518,1274,2.518,1275,2.518,1276,3.792,1277,2.518,1278,2.518,1279,3.792,1280,2.518,1281,2.518,1282,3.792,1283,2.518,1284,2.518,1285,3.236,1286,4.56,1287,2.518,1288,2.518,1289,2.518,1290,2.518,1291,2.518,1292,2.518,1293,2.518,1294,5.075,1295,3.792,1296,5.075,1297,2.518,1298,2.518,1299,2.149,1300,2.518,1301,2.518,1302,3.792,1303,2.518,1304,2.149,1305,2.518,1306,4.56,1307,2.518]],["title/interfaces/ValidationErrorItem.html",[416,1.128,1308,2.475]],["body/interfaces/ValidationErrorItem.html",[14,0.022,19,0.242,20,0.217,21,0.217,27,0.508,28,0.782,42,0.242,43,0.016,44,0.014,45,0.014,56,0.296,74,1.42,80,0.647,84,2.416,98,0.901,120,1.251,146,2.186,183,3.017,217,1.295,221,2.029,222,1.846,225,1.886,226,2.957,244,3.083,261,2.125,263,1.074,308,1.68,315,2.915,324,1.648,333,2.786,403,3.869,416,1.094,423,3.058,426,2.759,433,1.76,466,2.759,503,2.589,516,4.475,727,2.197,800,2.399,801,2.197,802,3.64,803,3.64,806,2.651,808,2.651,809,3.64,811,2.651,813,2.197,815,2.651,816,2.651,817,2.651,818,2.651,819,2.651,820,4.475,821,2.651,822,2.651,823,2.651,824,3.64,825,3.64,826,2.651,827,2.651,828,2.651,829,2.197,830,2.651,831,2.651,832,2.651,833,4.157,834,2.651,838,2.651,878,1.886,912,2.197,1257,2.651,1308,4.384,1309,2.651,1310,5.045,1311,2.989,1312,2.399,1313,2.989,1314,4.687,1315,5.288,1316,5.463,1317,2.989,1318,2.989,1319,2.989,1320,2.989,1321,2.989,1322,2.989,1323,2.989,1324,2.989,1325,2.989,1326,4.104,1327,2.989,1328,2.989,1329,2.989,1330,2.989,1331,2.989,1332,2.989,1333,2.989,1334,4.104,1335,2.989,1336,4.104,1337,2.989,1338,2.989,1339,2.989,1340,4.687,1341,2.989,1342,2.989,1343,2.989,1344,2.989,1345,2.989,1346,2.989,1347,2.989,1348,2.989,1349,2.989,1350,2.989,1351,2.989,1352,2.989]],["title/classes/ValidationExceptionFilter.html",[43,0.011,1312,2.475]],["body/classes/ValidationExceptionFilter.html",[14,0.022,19,0.225,20,0.201,21,0.201,27,0.488,28,0.725,42,0.225,43,0.016,44,0.013,45,0.013,56,0.274,57,1.507,74,1.558,80,0.674,84,2.293,93,1.009,96,1.843,97,1.319,98,0.988,101,1.742,120,1.171,146,2.116,183,3.59,217,1.951,221,1.882,222,1.787,225,2.84,226,2.84,244,3.044,257,1.273,261,2.016,263,1.019,308,1.594,315,2.837,324,1.528,333,2.644,386,1.201,387,1.749,403,3.493,416,1.014,423,2.896,426,2.651,433,1.632,466,3.347,503,2.457,516,4.332,727,2.037,800,2.224,801,2.863,802,3.993,803,4.332,806,3.454,808,3.993,809,4.332,811,3.454,812,2.772,813,2.037,815,2.459,816,2.459,817,2.459,818,2.459,819,2.459,820,4.332,821,2.459,822,2.459,823,2.459,824,3.454,825,3.454,826,2.459,827,2.459,828,2.459,829,2.037,830,2.459,831,2.459,832,2.459,833,3.993,834,2.459,838,2.459,912,2.037,1257,2.459,1308,4.398,1309,4.563,1310,5.335,1311,2.772,1312,3.125,1313,3.895,1314,5.145,1315,5.145,1316,5.335,1317,2.772,1318,2.772,1319,2.772,1320,2.772,1321,2.772,1322,3.895,1323,2.772,1324,2.772,1325,2.772,1326,3.895,1327,2.772,1328,2.772,1329,2.772,1330,2.772,1331,2.772,1332,2.772,1333,3.895,1334,3.895,1335,2.772,1336,3.895,1337,2.772,1338,2.772,1339,2.772,1340,4.503,1341,2.772,1342,2.772,1343,2.772,1344,2.772,1345,2.772,1346,2.772,1347,2.772,1348,2.772,1349,2.772,1350,2.772,1351,2.772,1352,2.772,1353,4.563,1354,4.563,1355,3.248,1356,3.248,1357,3.248,1358,3.248]],["title/coverage.html",[1359,3.718]],["body/coverage.html",[6,1.881,14,0.022,15,2.169,21,0.231,24,2.564,25,2.348,31,1.105,33,1.661,43,0.021,44,0.015,45,0.015,46,2.414,47,3.808,48,3.195,71,2.348,74,1.105,77,1.761,80,0.441,104,2.348,168,2.348,184,2.348,191,1.881,194,1.881,256,2.348,258,3.812,259,3.892,262,1.588,319,3.195,323,2.015,341,2.564,354,2.169,363,3.673,416,2.038,417,2.528,427,2.367,440,2.33,442,3.195,443,3.195,503,3.875,540,2.564,541,3.195,544,2.169,568,3.195,580,2.564,581,3.195,587,2.348,598,2.169,612,2.348,631,3.195,661,3.195,662,3.808,718,4.425,762,2.169,763,3.195,798,2.834,799,3.195,800,3.892,839,3.195,840,2.564,877,2.564,879,3.195,880,3.195,886,3.195,913,3.195,922,3.808,923,3.808,924,3.059,926,3.195,960,3.195,1009,2.564,1010,3.195,1079,3.195,1123,3.195,1132,3.808,1137,3.808,1156,3.195,1180,3.195,1183,2.348,1184,3.195,1203,3.195,1227,2.564,1228,3.195,1248,2.169,1267,3.195,1308,2.564,1309,3.808,1312,2.564,1359,2.834,1360,2.834,1361,3.743,1362,3.743,1363,3.743,1364,5.683,1365,3.743,1366,3.743,1367,3.743,1368,5.683,1369,3.743,1370,3.743,1371,3.743,1372,5.031,1373,3.743,1374,3.743,1375,3.743,1376,5.031,1377,5.031,1378,4.294,1379,5.683,1380,5.683,1381,3.743,1382,3.743,1383,5.683,1384,6.34,1385,5.031,1386,3.195,1387,3.743,1388,3.743,1389,3.743,1390,3.743,1391,3.743,1392,3.743,1393,3.743,1394,3.743,1395,3.743,1396,3.743,1397,3.743,1398,3.743,1399,3.743,1400,3.743]],["title/dependencies.html",[3,2.181,1401,2.583]],["body/dependencies.html",[3,2.555,14,0.022,28,1.135,30,2.247,43,0.018,44,0.018,45,0.018,118,1.992,206,1.502,308,1.776,310,2.738,464,2.555,556,3.483,590,2.946,615,3.483,617,3.483,640,3.849,813,3.836,858,3.849,900,5.219,1402,6.559,1403,5.085,1404,6.116,1405,5.085,1406,5.085,1407,5.085,1408,5.085,1409,5.085,1410,5.085,1411,5.085,1412,5.085,1413,5.085,1414,5.085,1415,5.085,1416,5.085,1417,5.085,1418,5.085,1419,5.085,1420,5.085,1421,5.085,1422,5.085,1423,5.085,1424,5.085,1425,5.085,1426,5.085]],["title/miscellaneous/enumerations.html",[1427,1.754,1428,3.704]],["body/miscellaneous/enumerations.html",[14,0.022,44,0.017,45,0.017,54,2.906,56,0.392,197,1.708,387,4.024,406,3.114,407,2.5,690,3.351,1194,4.937,1200,3.963,1285,4.937,1427,2.69,1428,3.963,1429,4.643,1430,5.784,1431,4.643,1432,5.784,1433,4.643,1434,4.643,1435,4.643,1436,5.784,1437,5.784,1438,5.784,1439,5.784,1440,5.784,1441,5.784,1442,5.784,1443,5.784,1444,5.784,1445,5.784,1446,5.784,1447,5.784,1448,5.784,1449,5.784,1450,5.784,1451,5.784,1452,5.784,1453,5.784,1454,5.784,1455,5.784,1456,4.643,1457,5.784]],["title/miscellaneous/functions.html",[1427,1.754,1458,3.704]],["body/miscellaneous/functions.html",[6,3.462,14,0.019,44,0.019,45,0.019,56,0.484,1386,4.887,1427,3.318,1458,4.887,1459,5.726]],["title/index.html",[56,0.256,1460,2.583,1461,2.583]],["body/index.html",[14,0.021,18,3.307,20,0.238,44,0.015,45,0.015,51,0.721,52,2.636,171,2.23,173,1.6,290,3.088,448,2.415,570,5.617,650,4.362,842,3.285,861,2.914,863,4.982,903,3.285,1141,3.285,1299,3.285,1359,2.914,1360,3.88,1462,3.849,1463,3.849,1464,5.763,1465,5.126,1466,3.849,1467,3.849,1468,3.849,1469,3.849,1470,5.126,1471,5.763,1472,3.849,1473,3.849,1474,6.145,1475,3.849,1476,6.823,1477,3.849,1478,6.717,1479,3.849,1480,3.849,1481,3.849,1482,5.126,1483,3.849,1484,5.126,1485,3.849,1486,5.763,1487,3.849,1488,5.126,1489,3.849,1490,3.849,1491,3.849,1492,3.849,1493,3.849,1494,6.145,1495,6.823,1496,3.285,1497,5.126,1498,3.849,1499,3.849,1500,3.849,1501,3.849,1502,5.126,1503,6.145,1504,5.126,1505,3.849,1506,5.126,1507,6.399,1508,6.145,1509,3.849,1510,5.126,1511,3.849,1512,3.849,1513,3.849,1514,6.145,1515,3.849,1516,3.849,1517,3.849,1518,3.849,1519,3.849,1520,5.126,1521,3.849,1522,3.849,1523,3.849,1524,3.849,1525,5.126,1526,3.849,1527,3.849,1528,3.849,1529,5.126,1530,3.849,1531,3.849,1532,5.245,1533,5.126,1534,3.849,1535,3.849,1536,3.849,1537,3.849,1538,3.849,1539,3.849,1540,3.849,1541,3.849,1542,5.126,1543,3.849,1544,3.849,1545,3.849,1546,3.849,1547,3.849,1548,3.849,1549,3.849,1550,3.849,1551,3.849,1552,5.126,1553,3.849,1554,3.849,1555,3.849,1556,3.849,1557,5.126,1558,3.849,1559,3.849,1560,3.849,1561,4.375,1562,5.126,1563,3.849,1564,3.849,1565,3.849,1566,3.849,1567,3.849,1568,3.849,1569,3.849,1570,3.849,1571,3.849,1572,3.849,1573,3.285,1574,3.849,1575,3.849,1576,3.849,1577,3.849,1578,3.849,1579,3.849,1580,2.636]],["title/license.html",[1460,2.583,1461,2.583,1580,2.073]],["body/license.html",[14,0.018,18,2.441,44,0.018,45,0.018,424,3.327,517,3.678,603,3.732,712,3.327,813,3.048,884,4.146,912,3.732,1304,4.146,1360,3.678,1561,4.146,1580,3.327,1581,6.43,1582,4.858,1583,4.858,1584,4.858,1585,4.858,1586,5.949,1587,4.858,1588,4.858,1589,4.858,1590,4.858,1591,4.858,1592,4.858,1593,5.949,1594,7.207,1595,4.858,1596,4.858,1597,6.43,1598,4.858,1599,4.858,1600,4.858,1601,4.858,1602,4.858,1603,4.858,1604,4.858,1605,4.858,1606,4.858,1607,5.949,1608,4.858,1609,4.858,1610,4.858,1611,4.858,1612,4.858,1613,4.858,1614,5.949,1615,5.949,1616,4.858,1617,4.858,1618,4.858,1619,4.858,1620,4.858,1621,4.858,1622,4.858,1623,4.858,1624,4.858,1625,4.858,1626,4.858,1627,4.858,1628,4.858,1629,4.858,1630,4.858,1631,4.858,1632,4.858,1633,4.858,1634,4.858,1635,4.858,1636,4.858,1637,4.858,1638,4.858,1639,4.858,1640,4.858,1641,4.858,1642,4.858]],["title/modules.html",[2,2.468]],["body/modules.html",[1,3.461,2,2.772,13,3.461,14,0.019,44,0.019,45,0.019,547,3.779,551,3.461,552,3.461,1532,6.072,1643,7.115,1644,7.115,1645,7.115]],["title/overview.html",[1646,4.192]],["body/overview.html",[0,1.885,1,4.429,2,2.279,3,2.279,4,2.627,5,2.627,6,2.279,7,2.627,8,2.627,9,3.87,10,3.87,11,3.87,12,3.87,13,4.314,14,0.022,15,4.045,16,3.302,17,2.627,18,2.279,23,1.777,44,0.017,45,0.017,184,4.379,191,3.507,194,3.286,257,1.777,393,2.004,441,2.441,544,3.612,547,4.913,548,3.87,549,3.87,550,3.87,551,4.527,552,4.227,598,3.612,609,3.87,610,3.87,611,3.87,612,3.91,840,3.106,878,2.441,925,3.106,978,3.87,1115,3.87,1116,3.87,1117,3.87,1248,3.612,1261,3.87,1262,3.87,1646,3.87,1647,4.535,1648,5.7,1649,4.535,1650,4.535]],["title/properties.html",[263,0.969,1401,2.583]],["body/properties.html",[14,0.021,44,0.019,45,0.019,51,1.066,263,1.27,1573,4.857,1580,3.897,1651,5.69,1652,5.69,1653,5.69]],["title/miscellaneous/variables.html",[907,3.285,1427,1.754]],["body/miscellaneous/variables.html",[14,0.021,33,2.397,44,0.018,45,0.018,56,0.446,80,0.737,92,2.654,118,2.07,120,1.172,197,1.56,386,2.465,387,3.588,865,4.736,907,3.998,1132,3.998,1137,5.216,1378,4.508,1427,3.061,1496,4.508,1654,6.256,1655,5.282,1656,5.282,1657,5.282,1658,5.282,1659,6.256,1660,5.282]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":503,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1652,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":768,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["01'})@isnotempty()@isdatestring",{"_index":769,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["0})@column({type",{"_index":977,"title":{},"body":{"entities/Product.html":{}}}],["1",{"_index":393,"title":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":388,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["10.00",{"_index":1113,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["100",{"_index":718,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["100})@column({length",{"_index":972,"title":{},"body":{"entities/Product.html":{}}}],["100})@isnumber()@min(0",{"_index":732,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["100})@isnumber()@min(0)@isoptional",{"_index":1178,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["100})@type(undefined)@isnumber()@min(1)@max(100)@isoptional",{"_index":1096,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["10})@isoptional()@type(undefined)@isint()@min(1)@max(100",{"_index":391,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["10})@type(undefined)@isnumber()@min(0)@isoptional",{"_index":1101,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["11",{"_index":1650,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["17/17",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["1990",{"_index":767,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1d",{"_index":630,"title":{},"body":{"modules/AuthModule.html":{}}}],["1})@isoptional()@type(undefined)@isint()@min(1",{"_index":394,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["1})@type(undefined)@isnumber()@min(1)@isoptional",{"_index":1103,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["2",{"_index":957,"title":{},"body":{"entities/Product.html":{}}}],["2/2",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":108,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":76,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["2025",{"_index":1583,"title":{},"body":{"license.html":{}}}],["24.99",{"_index":745,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["24.99})@isnumber()@min(0)@isoptional",{"_index":705,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["25",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":938,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["29.99",{"_index":743,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["29.99})@isnumber()@min(0",{"_index":724,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["29.99})@isnumber()@min(0)@isoptional",{"_index":1175,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["3",{"_index":978,"title":{},"body":{"entities/Product.html":{},"overview.html":{}}}],["3/3",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":534,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["31",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":82,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":87,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["403",{"_index":89,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["404",{"_index":124,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["46",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1647,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1410,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["50.00",{"_index":1114,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["50})@type(undefined)@isnumber()@min(0)@isoptional",{"_index":1099,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["54",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1648,"title":{},"body":{"overview.html":{}}}],["6/11",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["6/12",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["6/13",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["6/19",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":1369,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1649,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["8.15.6",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["8801712345678",{"_index":783,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9/10",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["9_]+):\\s",{"_index":1330,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["above",{"_index":1613,"title":{},"body":{"license.html":{}}}],["access",{"_index":91,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["access_token",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessories",{"_index":1446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["action",{"_index":1636,"title":{},"body":{"license.html":{}}}],["activate",{"_index":358,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["active",{"_index":165,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["activeusers",{"_index":526,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["additionalproperties",{"_index":986,"title":{},"body":{"entities/Product.html":{}}}],["address",{"_index":280,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{}}}],["address'})@isoptional()@isemail",{"_index":278,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["admin",{"_index":54,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"miscellaneous/enumerations.html":{}}}],["admin/admin.module",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/controllers/admin",{"_index":1121,"title":{},"body":{"modules/ProductsModule.html":{}}}],["admin/products",{"_index":50,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["admin/users",{"_index":320,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["administrative",{"_index":209,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["adminmodule",{"_index":1,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminproductcontroller",{"_index":25,"title":{"controllers/AdminProductController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["adminupdateuserdto",{"_index":256,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminusercontroller",{"_index":24,"title":{"controllers/AdminUserController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["adminuserquerydto",{"_index":323,"title":{"classes/AdminUserQueryDto.html":{}},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["adminuserservice",{"_index":15,"title":{"injectables/AdminUserService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"coverage.html":{},"overview.html":{}}}],["after)'})@isoptional()@isdatestring",{"_index":376,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["allowing",{"_index":1521,"title":{},"body":{"index.html":{}}}],["already",{"_index":1281,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":1566,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1605,"title":{},"body":{"license.html":{}}}],["any).error",{"_index":836,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["any).message",{"_index":834,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["api",{"_index":429,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AppService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["apibearerauth",{"_index":205,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["apibody",{"_index":344,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apioperation",{"_index":200,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":202,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":309,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Product.html":{}}}],["apiproperty({description",{"_index":289,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Product.html":{}}}],["apipropertyoptional",{"_index":311,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({description",{"_index":273,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({enum",{"_index":396,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["apiquery",{"_index":203,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":201,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["apisecurity",{"_index":204,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["apisecurity('bearer",{"_index":345,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apitags",{"_index":199,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":212,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["apitags('authentication",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('d",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('products",{"_index":1060,"title":{},"body":{"controllers/ProductController.html":{}}}],["app.controller",{"_index":554,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":545,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":540,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":570,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1470,"title":{},"body":{"index.html":{}}}],["apply",{"_index":479,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["appmodule",{"_index":547,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":544,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":809,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arising",{"_index":1640,"title":{},"body":{"license.html":{}}}],["array",{"_index":433,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["array.isarray(messages",{"_index":1317,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arrival",{"_index":156,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["arrival')@apioperation({summary",{"_index":155,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["arrivals",{"_index":1066,"title":{},"body":{"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["arrivals')@apioperation({summary",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{}}}],["asc",{"_index":406,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["assertion",{"_index":1339,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["assign",{"_index":1292,"title":{},"body":{"injectables/UsersService.html":{}}}],["associated",{"_index":424,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"license.html":{}}}],["async",{"_index":58,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":622,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":193,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{}}}],["auth.guard.ts",{"_index":839,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:17",{"_index":849,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:25",{"_index":852,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:40",{"_index":855,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":196,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["auth/guards/jwt",{"_index":192,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["auth/guards/roles.guard",{"_index":195,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["authcontroller",{"_index":580,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticated",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["authenticated'})@apiresponse({status",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authentication",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["authguard",{"_index":857,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":844,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":551,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1573,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":1630,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":598,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":693,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["average",{"_index":976,"title":{},"body":{"entities/Product.html":{}}}],["await",{"_index":223,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1510,"title":{},"body":{"index.html":{}}}],["azminur",{"_index":1584,"title":{},"body":{"license.html":{}}}],["backers",{"_index":1567,"title":{},"body":{"index.html":{}}}],["bad",{"_index":83,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":183,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["badrequestexception('created",{"_index":471,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["badrequestexception('email",{"_index":1280,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('last",{"_index":475,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["badrequestexception(`error",{"_index":228,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{}}}],["badrequestexception(`role",{"_index":520,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["bangladeshi",{"_index":782,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["based",{"_index":861,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["basic",{"_index":513,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Product.html":{}}}],["bcrypt",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(logindto.password",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":1283,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":1307,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1303,"title":{},"body":{"injectables/UsersService.html":{}}}],["before",{"_index":437,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["before)'})@isoptional()@isdatestring",{"_index":378,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["best",{"_index":143,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["between",{"_index":461,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["between(thirtydaysago",{"_index":539,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["birth",{"_index":277,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["birth'})@isoptional()@type(undefined)@isdate",{"_index":274,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["black",{"_index":752,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["black'})@isstring()@isoptional",{"_index":1087,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["board",{"_index":1560,"title":{},"body":{"index.html":{}}}],["body",{"_index":176,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["body('isactive",{"_index":361,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["boolean",{"_index":284,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{}}}],["boolean})@transform",{"_index":1088,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brand",{"_index":663,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["browse",{"_index":1645,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1643,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1465,"title":{},"body":{"index.html":{}}}],["c",{"_index":1582,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":845,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":850,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["care",{"_index":681,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["careinstructions",{"_index":664,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["casual_wear",{"_index":1451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["catch",{"_index":225,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(badrequestexception",{"_index":1311,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(exception",{"_index":806,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(httpexception",{"_index":814,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categorization",{"_index":932,"title":{},"body":{"entities/Product.html":{}}}],["category",{"_index":665,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["category'})@apiparam({name",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["category'})@apiquery({name",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{}}}],["category.enum",{"_index":741,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["category.enum.ts",{"_index":1432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["change",{"_index":1306,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword",{"_index":1268,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword(id",{"_index":1271,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":1535,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1590,"title":{},"body":{"license.html":{}}}],["check",{"_index":863,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["checks",{"_index":577,"title":{},"body":{"injectables/AppService.html":{}}}],["claim",{"_index":1633,"title":{},"body":{"license.html":{}}}],["class",{"_index":43,"title":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":257,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{},"overview.html":{}}}],["classic",{"_index":721,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["clicks",{"_index":1520,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1505,"title":{},"body":{"index.html":{}}}],["cluster_adminmodule",{"_index":9,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_exports",{"_index":12,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":10,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":11,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":549,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":550,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1115,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1116,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1117,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1261,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1262,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cold",{"_index":685,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["color",{"_index":1080,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["colors",{"_index":666,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["column",{"_index":995,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["column('varchar",{"_index":1008,"title":{},"body":{"entities/Product.html":{}}}],["column({type",{"_index":1125,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["come",{"_index":1526,"title":{},"body":{"index.html":{}}}],["comfortable",{"_index":696,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["commerce",{"_index":928,"title":{},"body":{"entities/Product.html":{}}}],["conditions",{"_index":1612,"title":{},"body":{"license.html":{}}}],["config/db.config",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":562,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expires_in",{"_index":629,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":626,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":1641,"title":{},"body":{"license.html":{}}}],["const",{"_index":244,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraint",{"_index":1325,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch",{"_index":1326,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[1",{"_index":1331,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[2",{"_index":1332,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints",{"_index":1340,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints[key",{"_index":1346,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constructor",{"_index":446,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":892,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":847,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(private",{"_index":216,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1133,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":447,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersrepository",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["containing",{"_index":896,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["contains",{"_index":418,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["context",{"_index":853,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":869,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":868,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1143,"title":{},"body":{"guards/RolesGuard.html":{}}}],["continue",{"_index":870,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contract",{"_index":1637,"title":{},"body":{"license.html":{}}}],["controller",{"_index":46,"title":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin/products",{"_index":213,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["controller('admin/users",{"_index":346,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["controller('auth",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('products",{"_index":1061,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('users",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":23,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/admin",{"_index":35,"title":{},"body":{"modules/AdminModule.html":{}}}],["controllers/product.controller",{"_index":1120,"title":{},"body":{"modules/ProductsModule.html":{}}}],["copies",{"_index":1607,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1593,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1581,"title":{},"body":{"license.html":{}}}],["core",{"_index":574,"title":{},"body":{"injectables/AppService.html":{}}}],["cotton",{"_index":698,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["cotton'})@isstring()@isoptional",{"_index":719,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["count",{"_index":528,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["courses",{"_index":1541,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1359,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":59,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":220,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["create(createproductdto",{"_index":70,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["created",{"_index":78,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["created'})@apiresponse({status",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["created'})@createdatecolumn",{"_index":947,"title":{},"body":{"entities/Product.html":{}}}],["created_at",{"_index":1191,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["createdafter",{"_index":365,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["createdat",{"_index":438,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"entities/Users.html":{}}}],["createdatecolumn",{"_index":997,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["createdbefore",{"_index":366,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["createproductdto",{"_index":71,"title":{"classes/CreateProductDto.html":{}},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["creates",{"_index":95,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["createuser",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":762,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.profileimage",{"_index":1291,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":100,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["creation",{"_index":375,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["credentials",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["criteria",{"_index":504,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["ctx",{"_index":815,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":818,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":817,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["current",{"_index":419,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{}}}],["currently",{"_index":964,"title":{},"body":{"entities/Product.html":{}}}],["custom",{"_index":872,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["customer",{"_index":1285,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["customerrole",{"_index":1286,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["damages",{"_index":1634,"title":{},"body":{"license.html":{}}}],["data",{"_index":99,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["data'})@apiresponse({status",{"_index":86,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["date",{"_index":272,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["date().toisostring",{"_index":830,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["date(0",{"_index":489,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(createdbefore",{"_index":470,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(lastloginafter",{"_index":473,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(lastloginbefore",{"_index":474,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["days",{"_index":535,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["dbconfig",{"_index":557,"title":{},"body":{"modules/AppModule.html":{}}}],["dd",{"_index":772,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["deactivate",{"_index":359,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["deal",{"_index":1596,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1642,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":953,"title":{},"body":{"entities/Product.html":{}}}],["decimal'})@column({type",{"_index":974,"title":{},"body":{"entities/Product.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":72,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1537,"title":{},"body":{"index.html":{}}}],["default",{"_index":386,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":93,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["defines",{"_index":313,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["delete",{"_index":135,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":240,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":134,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["delete(':id')@useguards(jwtauthguard",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleted",{"_index":136,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["delivery_man",{"_index":1457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1494,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1509,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1502,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1519,"title":{},"body":{"index.html":{}}}],["desc",{"_index":407,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["desc'})@isoptional()@isstring",{"_index":409,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["description",{"_index":51,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":949,"title":{},"body":{"entities/Product.html":{}}}],["details",{"_index":1004,"title":{},"body":{"entities/Product.html":{},"controllers/ProductController.html":{}}}],["development",{"_index":1479,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1547,"title":{},"body":{"index.html":{}}}],["different",{"_index":874,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["direction.enum",{"_index":1201,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["direction.enum.ts",{"_index":1430,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["discord",{"_index":1534,"title":{},"body":{"index.html":{}}}],["discounted",{"_index":704,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["discountedprice",{"_index":667,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["distribute",{"_index":1603,"title":{},"body":{"license.html":{}}}],["dive",{"_index":1536,"title":{},"body":{"index.html":{}}}],["dob",{"_index":264,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"entities/Users.html":{}}}],["documentation",{"_index":1360,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doe",{"_index":777,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":1152,"title":{},"body":{"guards/RolesGuard.html":{}}}],["dresses",{"_index":1440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dry",{"_index":687,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["dsc",{"_index":1434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/admin",{"_index":339,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["dto/create",{"_index":1054,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/product",{"_index":1056,"title":{},"body":{"controllers/ProductController.html":{}}}],["dto/update",{"_index":1055,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["during",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":927,"title":{},"body":{"entities/Product.html":{}}}],["e2e",{"_index":1489,"title":{},"body":{"index.html":{}}}],["each",{"_index":710,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["efficient",{"_index":1466,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1500,"title":{},"body":{"index.html":{}}}],["elevate",{"_index":678,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["elvate",{"_index":578,"title":{},"body":{"injectables/AppService.html":{}}}],["email",{"_index":265,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["email'})@isoptional()@isstring",{"_index":400,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["endpoints",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["ensure",{"_index":1498,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1551,"title":{},"body":{"index.html":{}}}],["entities",{"_index":925,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/product.entity",{"_index":1119,"title":{},"body":{"modules/ProductsModule.html":{}}}],["entities/roles.entity",{"_index":1266,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/users.entity",{"_index":1265,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":924,"title":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entity('products",{"_index":1005,"title":{},"body":{"entities/Product.html":{}}}],["enum",{"_index":299,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateProductDto.html":{}}}],["enumerations",{"_index":1428,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/product",{"_index":740,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["enums/roles.enum",{"_index":1130,"title":{},"body":{"entities/Roles.html":{},"injectables/UsersService.html":{}}}],["environment",{"_index":906,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["equal",{"_index":1189,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["err",{"_index":856,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":226,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error('jwt_secret",{"_index":905,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error.children",{"_index":1347,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.foreach(child",{"_index":1349,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.length",{"_index":1348,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.constraints",{"_index":1342,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.match(/^([a",{"_index":1327,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.message",{"_index":229,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{}}}],["error.property",{"_index":1338,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errorresponse",{"_index":827,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors",{"_index":1314,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.foreach(error",{"_index":1351,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.map(error",{"_index":1323,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ethnic_wear",{"_index":1452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":1629,"title":{},"body":{"license.html":{}}}],["everyday",{"_index":701,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["example",{"_index":290,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"index.html":{}}}],["exception",{"_index":811,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":800,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":805,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":810,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":1355,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:20",{"_index":1356,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:63",{"_index":1358,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1357,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.getresponse",{"_index":821,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.getstatus",{"_index":819,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.message",{"_index":835,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":802,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptionresponse",{"_index":820,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptions",{"_index":873,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncontext",{"_index":851,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existinguser",{"_index":1279,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1146,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exp",{"_index":882,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expandvariables",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["experience",{"_index":1539,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":883,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expired",{"_index":876,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["expiresin",{"_index":628,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":42,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":813,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":843,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extracterrors",{"_index":1335,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(child",{"_index":1350,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(error",{"_index":1352,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extractjwt",{"_index":899,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":909,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":888,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fabric",{"_index":757,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["failed",{"_index":1321,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["false",{"_index":318,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{}}}],["false})@column({type",{"_index":966,"title":{},"body":{"entities/Product.html":{}}}],["false})@isboolean()@isoptional",{"_index":713,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isoptional()@isboolean",{"_index":292,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["false})@isoptional()@isenum(role",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isoptional()@isstring",{"_index":778,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isoptional()@isstring()@isphonenumber('bd",{"_index":784,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fashion",{"_index":760,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["fashion'})@isstring()@isoptional",{"_index":679,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["fast",{"_index":1513,"title":{},"body":{"index.html":{}}}],["featured",{"_index":151,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["features",{"_index":1523,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1284,"title":{},"body":{"injectables/UsersService.html":{}}}],["few",{"_index":1514,"title":{},"body":{"index.html":{}}}],["field",{"_index":403,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["fields",{"_index":514,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["files",{"_index":1595,"title":{},"body":{"license.html":{}}}],["filter",{"_index":374,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["filtering",{"_index":106,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["filtering'})@apiresponse({status",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{}}}],["filters",{"_index":480,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["finalsortby",{"_index":494,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["finalsortorder",{"_index":496,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["finalsortorder.touppercase",{"_index":500,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["findall",{"_index":60,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["findall(@query",{"_index":230,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["findall(query",{"_index":1022,"title":{},"body":{"controllers/ProductController.html":{}}}],["findall(querydto",{"_index":103,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["findone",{"_index":61,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["findone(@param('id",{"_index":235,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["findone(id",{"_index":119,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["findoptionswhere",{"_index":463,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["first",{"_index":281,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["firstname",{"_index":266,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["fit",{"_index":758,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fitness",{"_index":1625,"title":{},"body":{"license.html":{}}}],["focus",{"_index":1522,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1554,"title":{},"body":{"index.html":{}}}],["following",{"_index":1611,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":90,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["forbidden'})@apiresponse({status",{"_index":328,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["forbiddenexception",{"_index":1136,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1147,"title":{},"body":{"guards/RolesGuard.html":{}}}],["formal_wear",{"_index":1450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":333,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formatnestedvalidationerrors",{"_index":1353,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatnestedvalidationerrors(errors",{"_index":1333,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors",{"_index":1334,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors.push",{"_index":1345,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors",{"_index":1354,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors(errors",{"_index":1322,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["found",{"_index":125,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@httpcode(httpstatus.ok",{"_index":335,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["framework",{"_index":1464,"title":{},"body":{"index.html":{}}}],["free",{"_index":1589,"title":{},"body":{"license.html":{}}}],["full",{"_index":1550,"title":{},"body":{"index.html":{}}}],["function",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":575,"title":{},"body":{"injectables/AppService.html":{}}}],["functions",{"_index":1458,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1610,"title":{},"body":{"license.html":{}}}],["g",{"_index":1517,"title":{},"body":{"index.html":{}}}],["generates",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":428,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["get(':id",{"_index":234,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["get('best",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('category/:category",{"_index":1074,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('category/:category')@apioperation({summary",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('featured",{"_index":1063,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('featured')@apioperation({summary",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('new",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('on",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('stats",{"_index":232,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["get('stats')@apioperation({summary",{"_index":128,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["get()@apioperation({summary",{"_index":105,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["getallusers",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(userquerydto",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getbestsellers",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{}}}],["getbestsellers(@query('limit",{"_index":1070,"title":{},"body":{"controllers/ProductController.html":{}}}],["getbestsellers(limit",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{}}}],["getfeaturedproducts",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{}}}],["getfeaturedproducts(@query('limit",{"_index":1064,"title":{},"body":{"controllers/ProductController.html":{}}}],["getfeaturedproducts(limit",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{}}}],["gethello",{"_index":542,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnewarrivals",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["getnewarrivals(@query('limit",{"_index":1067,"title":{},"body":{"controllers/ProductController.html":{}}}],["getnewarrivals(limit",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{}}}],["getonsaleproducts",{"_index":1015,"title":{},"body":{"controllers/ProductController.html":{}}}],["getonsaleproducts(@query('limit",{"_index":1072,"title":{},"body":{"controllers/ProductController.html":{}}}],["getonsaleproducts(limit",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductsbycategory",{"_index":1016,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductsbycategory(category",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["getstats",{"_index":62,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["getting",{"_index":1460,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserbyid",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyid(@param('id",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserstats",{"_index":321,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["granted",{"_index":1588,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1544,"title":{},"body":{"index.html":{}}}],["greater",{"_index":1188,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["greeting",{"_index":572,"title":{},"body":{"injectables/AppService.html":{}}}],["grow",{"_index":1563,"title":{},"body":{"index.html":{}}}],["guard",{"_index":840,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1131,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":516,"title":{},"body":{"injectables/AdminUserService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["handlerequest",{"_index":846,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":854,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlers",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":208,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AppService.html":{}}}],["handling",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{}}}],["hands",{"_index":1538,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1527,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1301,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1282,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasrole",{"_index":1148,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":889,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["health",{"_index":576,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1542,"title":{},"body":{"index.html":{}}}],["here",{"_index":1571,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1587,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1631,"title":{},"body":{"license.html":{}}}],["hoodies",{"_index":1444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":808,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":816,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["http",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{}}}],["httpcode",{"_index":181,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["httpcode(httpstatus.ok",{"_index":360,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httpexception",{"_index":807,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":798,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://example.com/image1.jpg",{"_index":755,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["https://example.com/image2.jpg",{"_index":756,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["https://example.com/profile.jpg",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["https://nestjs.com",{"_index":1577,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":180,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProductController.html":{}}}],["httpstatus.forbidden",{"_index":349,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.not_found",{"_index":352,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.ok",{"_index":347,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["httpstatus.unauthorized",{"_index":348,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus[status",{"_index":837,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["id",{"_index":127,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Roles.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["id'})@apiresponse({status",{"_index":122,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":960,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":910,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":462,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["image",{"_index":707,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{}}}],["images",{"_index":668,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["implement",{"_index":860,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["implements",{"_index":801,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["implied",{"_index":1621,"title":{},"body":{"license.html":{}}}],["import",{"_index":27,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["imports",{"_index":26,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["included",{"_index":1616,"title":{},"body":{"license.html":{}}}],["including",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"license.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["information",{"_index":173,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["information'})@apiparam({name",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["infrastructure",{"_index":1524,"title":{},"body":{"index.html":{}}}],["inject",{"_index":624,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":440,"title":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":441,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":460,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["injectrepository(roles",{"_index":467,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(users",{"_index":465,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":1516,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1477,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":506,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["instructions",{"_index":682,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["int",{"_index":982,"title":{},"body":{"entities/Product.html":{}}}],["integer",{"_index":981,"title":{},"body":{"entities/Product.html":{}}}],["interact",{"_index":1545,"title":{},"body":{"index.html":{}}}],["interface",{"_index":416,"title":{"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["interfaces",{"_index":878,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":901,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('customer",{"_index":1288,"title":{},"body":{"injectables/UsersService.html":{}}}],["internalservererrorexception('error",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":1294,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":85,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AuthService.html":{}}}],["inventory",{"_index":931,"title":{},"body":{"entities/Product.html":{}}}],["isactive",{"_index":267,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{}}}],["isarray",{"_index":736,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isbestseller",{"_index":669,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isboolean",{"_index":302,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isboolean()@isoptional",{"_index":1089,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["isdate",{"_index":312,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["isdatestring",{"_index":411,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UpdateUserDto.html":{}}}],["isemail",{"_index":303,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemailverified",{"_index":268,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{}}}],["isenum",{"_index":304,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isenum(orderdirection",{"_index":1202,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isenum(productcategory",{"_index":747,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isenum(role",{"_index":317,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["isfeatured",{"_index":670,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isglobal",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":412,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UserQueryDto.html":{}}}],["isnan(page",{"_index":469,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["isnewarrival",{"_index":671,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty",{"_index":734,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isnumber",{"_index":735,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["iso",{"_index":766,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isobject",{"_index":738,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isonsale",{"_index":672,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional",{"_index":305,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isenum(orderdirection",{"_index":1196,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isint()@min(1",{"_index":1187,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isstring",{"_index":1192,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["ispasswordvalid",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isphonenumber('bd",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphoneverified",{"_index":269,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Users.html":{}}}],["ispublic",{"_index":866,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isstring",{"_index":306,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isurl",{"_index":737,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isuuid",{"_index":307,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["items",{"_index":389,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/UsersController.html":{}}}],["jackets",{"_index":1443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jeans",{"_index":1438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["job",{"_index":1557,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1559,"title":{},"body":{"index.html":{}}}],["john",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isnotempty()@isstring",{"_index":775,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com'})@isnotempty()@isemail",{"_index":773,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":1569,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":1001,"title":{},"body":{"entities/Product.html":{}}}],["jointable",{"_index":1224,"title":{},"body":{"entities/Users.html":{}}}],["json",{"_index":985,"title":{},"body":{"entities/Product.html":{}}}],["json.stringify(exceptionresponse",{"_index":826,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["jsonb",{"_index":987,"title":{},"body":{"entities/Product.html":{}}}],["jwt",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":191,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":908,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":623,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":877,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtsecret",{"_index":904,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":612,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1574,"title":{},"body":{"index.html":{}}}],["key",{"_index":1496,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["kids_wear",{"_index":1453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kind",{"_index":1620,"title":{},"body":{"license.html":{}}}],["l",{"_index":750,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["last",{"_index":294,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{}}}],["lastloginafter",{"_index":367,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["lastloginat",{"_index":439,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{}}}],["lastloginbefore",{"_index":368,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["lastname",{"_index":270,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["later",{"_index":472,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["learn",{"_index":1530,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1007,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["liability",{"_index":1635,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1632,"title":{},"body":{"license.html":{}}}],["license",{"_index":1580,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1562,"title":{},"body":{"index.html":{}}}],["like(`%${search",{"_index":1296,"title":{},"body":{"injectables/UsersService.html":{}}}],["limit",{"_index":369,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limitation",{"_index":1599,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1622,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":1556,"title":{},"body":{"index.html":{}}}],["list",{"_index":325,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["listing",{"_index":1057,"title":{},"body":{"controllers/ProductController.html":{}}}],["load",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":822,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logger",{"_index":803,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logger(httpexceptionfilter.name",{"_index":804,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(validationexceptionfilter.name",{"_index":1313,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["login",{"_index":383,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["login(@body",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":587,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1504,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1553,"title":{},"body":{"index.html":{}}}],["low",{"_index":761,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["low'})@isstring()@isoptional",{"_index":688,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["m",{"_index":749,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["m'})@isstring()@isoptional",{"_index":1106,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["machine",{"_index":683,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["main",{"_index":569,"title":{},"body":{"injectables/AppService.html":{}}}],["make",{"_index":1144,"title":{},"body":{"guards/RolesGuard.html":{}}}],["makes",{"_index":1511,"title":{},"body":{"index.html":{}}}],["management",{"_index":211,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/UsersController.html":{}}}],["manages",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{}}}],["managing",{"_index":52,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"index.html":{}}}],["manytomany",{"_index":1129,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytomany(undefined",{"_index":1127,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytoone",{"_index":999,"title":{},"body":{"entities/Product.html":{}}}],["matching",{"_index":45,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":673,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["maternity_wear",{"_index":1454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["math.ceil(total",{"_index":505,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["mau",{"_index":1507,"title":{},"body":{"index.html":{}}}],["max",{"_index":414,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["max(100",{"_index":436,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["maximum",{"_index":1095,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["maxlength",{"_index":937,"title":{},"body":{"entities/Product.html":{}}}],["maxprice",{"_index":1081,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["means",{"_index":1140,"title":{},"body":{"guards/RolesGuard.html":{}}}],["merchantability",{"_index":1624,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1304,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["message",{"_index":423,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["messages",{"_index":1316,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["meta",{"_index":434,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["metadata",{"_index":118,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"controllers/ProductController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":832,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["min",{"_index":413,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{}}}],["min(0",{"_index":744,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["min(1",{"_index":435,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1094,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["minlength",{"_index":918,"title":{},"body":{"classes/LoginDto.html":{}}}],["minlength(6",{"_index":921,"title":{},"body":{"classes/LoginDto.html":{}}}],["minprice",{"_index":1082,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["miscellaneous",{"_index":1427,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1561,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":771,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mode",{"_index":1482,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1601,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1503,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1575,"title":{},"body":{"index.html":{}}}],["name",{"_index":97,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["name'})@isoptional()@isstring",{"_index":282,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["navy",{"_index":754,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["need",{"_index":1548,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1471,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1319,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["nestframework",{"_index":1579,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1495,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"modules/ProductsModule.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":556,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":858,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":1518,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":206,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":30,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":74,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["newuser",{"_index":1289,"title":{},"body":{"injectables/UsersService.html":{}}}],["newusers",{"_index":538,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["node.js",{"_index":1463,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1628,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":459,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":1300,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":511,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":1614,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1476,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":939,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["number",{"_index":298,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number'})@apiquery({name",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["number'})@isoptional()@isstring",{"_index":296,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["number})@apiresponse({status",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{}}}],["object",{"_index":261,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.assign(user",{"_index":515,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["object.keys(constraints).foreach(key",{"_index":1344,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.keys(constraints).length",{"_index":1343,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.values(role",{"_index":530,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["obtaining",{"_index":1592,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1558,"title":{},"body":{"index.html":{}}}],["official",{"_index":1508,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1000,"title":{},"body":{"entities/Product.html":{}}}],["open",{"_index":1141,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["operations",{"_index":210,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["optional",{"_index":98,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["order",{"_index":408,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_by",{"_index":1185,"title":{},"body":{"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction",{"_index":1186,"title":{},"body":{"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction.touppercase",{"_index":1298,"title":{},"body":{"injectables/UsersService.html":{}}}],["orderdirection",{"_index":1194,"title":{},"body":{"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirection.desc",{"_index":1195,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["otherwise",{"_index":1639,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1646,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1401,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":370,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":421,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["paginated",{"_index":425,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["paginatedresponse",{"_index":427,"title":{"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pagination",{"_index":115,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["pagination'})@apiresponse({status",{"_index":107,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["paginationmeta",{"_index":417,"title":{"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pants",{"_index":1439,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":178,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["param('category",{"_index":1075,"title":{},"body":{"controllers/ProductController.html":{}}}],["param('id",{"_index":238,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":96,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parameters'})@apiresponse({status",{"_index":112,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["parentfield",{"_index":1336,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parentfield}.${error.property",{"_index":1337,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parse",{"_index":1324,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parseuuidpipe",{"_index":182,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["part",{"_index":1549,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1182,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":1181,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1626,"title":{},"body":{"license.html":{}}}],["passport",{"_index":900,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":859,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passportmodule",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":898,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":891,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":764,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["password123",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["password123'})@isnotempty()@isstring",{"_index":780,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123'})@isstring()@isnotempty()@minlength(6",{"_index":916,"title":{},"body":{"classes/LoginDto.html":{}}}],["patch",{"_index":177,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":237,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":169,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@useguards(jwtauthguard",{"_index":1051,"title":{},"body":{"controllers/ProductController.html":{}}}],["patch(':id/best",{"_index":140,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["patch(':id/feature",{"_index":247,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["patch(':id/feature')@apioperation({summary",{"_index":150,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["patch(':id/new",{"_index":154,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["patch(':id/on",{"_index":159,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["patch(':id/status",{"_index":243,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/status')@apioperation({summary",{"_index":164,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["path",{"_index":831,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["payload",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":902,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":880,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["per",{"_index":390,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/UsersController.html":{}}}],["perfect",{"_index":700,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["permission",{"_index":1586,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1154,"title":{},"body":{"guards/RolesGuard.html":{}}}],["permit",{"_index":1608,"title":{},"body":{"license.html":{}}}],["person",{"_index":1591,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1609,"title":{},"body":{"license.html":{}}}],["perspective",{"_index":55,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["pg",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":271,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["platform",{"_index":1506,"title":{},"body":{"index.html":{}}}],["please",{"_index":1533,"title":{},"body":{"index.html":{}}}],["plus_size",{"_index":1455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["portions",{"_index":1618,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1501,"title":{},"body":{"index.html":{}}}],["post",{"_index":175,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":73,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/UsersController.html":{}}}],["post()@useguards(jwtauthguard",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{}}}],["precision",{"_index":955,"title":{},"body":{"entities/Product.html":{}}}],["prefix",{"_index":49,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":674,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["price'})@isstring()@isoptional",{"_index":1108,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["pricing",{"_index":930,"title":{},"body":{"entities/Product.html":{}}}],["primarygeneratedcolumn",{"_index":996,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1006,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["private",{"_index":466,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["processing",{"_index":507,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["product",{"_index":77,"title":{"entities/Product.html":{}},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product's",{"_index":172,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product'})@apiresponse({status",{"_index":75,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["product'})@column({type",{"_index":950,"title":{},"body":{"entities/Product.html":{}}}],["product'})@primarygeneratedcolumn('uuid",{"_index":961,"title":{},"body":{"entities/Product.html":{}}}],["product.controller",{"_index":40,"title":{},"body":{"modules/AdminModule.html":{},"modules/ProductsModule.html":{}}}],["product.controller.ts",{"_index":48,"title":{},"body":{"controllers/AdminProductController.html":{},"coverage.html":{}}}],["product.controller.ts:111",{"_index":170,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:129",{"_index":137,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:139",{"_index":166,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:152",{"_index":152,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:165",{"_index":157,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:178",{"_index":148,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:191",{"_index":162,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:51",{"_index":94,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:70",{"_index":113,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:79",{"_index":132,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.controller.ts:94",{"_index":126,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.dto",{"_index":187,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["product.dto.ts",{"_index":662,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:102",{"_index":720,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:107",{"_index":1172,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:110",{"_index":689,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:115",{"_index":1158,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:118",{"_index":715,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:12",{"_index":1174,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:123",{"_index":1169,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:126",{"_index":716,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:13",{"_index":723,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:131",{"_index":1170,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:134",{"_index":714,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:139",{"_index":1168,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:142",{"_index":717,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:147",{"_index":1171,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:155",{"_index":1167,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:20",{"_index":1164,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:21",{"_index":703,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:29",{"_index":725,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:38",{"_index":706,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:46",{"_index":733,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:47",{"_index":1179,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:54",{"_index":692,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:56",{"_index":1160,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:62",{"_index":726,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:65",{"_index":1176,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:70",{"_index":695,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:74",{"_index":1162,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:78",{"_index":711,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:83",{"_index":1165,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:86",{"_index":729,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:91",{"_index":1177,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:94",{"_index":680,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:99",{"_index":1157,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.isactive",{"_index":246,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.isbestseller",{"_index":253,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.isfeatured",{"_index":249,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.isnewarrival",{"_index":251,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["product.isonsale",{"_index":255,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["productcategory",{"_index":690,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["productcategory.t_shirts",{"_index":746,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["productcategory})@column({type",{"_index":943,"title":{},"body":{"entities/Product.html":{}}}],["productcategory})@isenum(productcategory)@isoptional",{"_index":1085,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["productcontroller",{"_index":1009,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["production",{"_index":1484,"title":{},"body":{"index.html":{}}}],["productquerydto",{"_index":104,"title":{"classes/ProductQueryDto.html":{}},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"coverage.html":{}}}],["products",{"_index":53,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["products'})@apiquery({name",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{}}}],["products/dto/create",{"_index":186,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["products/dto/product",{"_index":189,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["products/dto/update",{"_index":188,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["products/entities/product.entity",{"_index":207,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["products/products.module",{"_index":39,"title":{},"body":{"modules/AdminModule.html":{}}}],["products/services/product.service",{"_index":185,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["productservice",{"_index":184,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"modules/ProductsModule.html":{},"coverage.html":{},"overview.html":{}}}],["productsmodule",{"_index":13,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["product})@apiresponse({status",{"_index":81,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["profile",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["profile.jpg",{"_index":1218,"title":{},"body":{"entities/Users.html":{},"injectables/UsersService.html":{}}}],["profileimage",{"_index":765,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["progressive",{"_index":1462,"title":{},"body":{"index.html":{}}}],["project",{"_index":1474,"title":{},"body":{"index.html":{}}}],["promise",{"_index":102,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":263,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"properties.html":{}}}],["property",{"_index":1341,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["protects",{"_index":841,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provided",{"_index":517,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":864,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["publish",{"_index":1602,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1627,"title":{},"body":{"license.html":{}}}],["put",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["quantity",{"_index":731,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["queries",{"_index":364,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["query",{"_index":111,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":1076,"title":{},"body":{"controllers/ProductController.html":{}}}],["query.dto",{"_index":190,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":363,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:101",{"_index":401,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:108",{"_index":1107,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:110",{"_index":398,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:12",{"_index":1198,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:120",{"_index":381,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/ProductQueryDto.html":{}}}],["query.dto.ts:126",{"_index":382,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:131",{"_index":377,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:132",{"_index":1084,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:136",{"_index":379,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:141",{"_index":384,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:144",{"_index":1098,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:146",{"_index":385,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:154",{"_index":405,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:161",{"_index":1091,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:163",{"_index":410,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:17",{"_index":1190,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:178",{"_index":1092,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:195",{"_index":1090,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:21",{"_index":1193,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:212",{"_index":1093,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:225",{"_index":1109,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:239",{"_index":1111,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:25",{"_index":1197,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":1104,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:44",{"_index":1097,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:56",{"_index":1105,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:68",{"_index":1086,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:7",{"_index":1199,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:79",{"_index":395,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:82",{"_index":1102,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:92",{"_index":392,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:96",{"_index":1100,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["querybuilder",{"_index":477,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere",{"_index":481,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.createdat",{"_index":488,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.isactive",{"_index":486,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.isemailverified",{"_index":487,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.lastloginat",{"_index":490,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.role",{"_index":485,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.getmanyandcount",{"_index":502,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.orderby(`user.${finalsortby",{"_index":499,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.skip(skip).take(limit",{"_index":501,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querydto",{"_index":116,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["questions",{"_index":1531,"title":{},"body":{"index.html":{}}}],["rahman",{"_index":1585,"title":{},"body":{"license.html":{}}}],["rating",{"_index":933,"title":{},"body":{"entities/Product.html":{}}}],["read",{"_index":1570,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":217,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ready",{"_index":1493,"title":{},"body":{"index.html":{}}}],["real",{"_index":1546,"title":{},"body":{"index.html":{}}}],["record",{"_index":727,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["reflect",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":848,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":1204,"title":{},"body":{"entities/Users.html":{}}}],["regular",{"_index":759,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["related",{"_index":1003,"title":{},"body":{"entities/Product.html":{},"controllers/ProductController.html":{}}}],["relations",{"_index":510,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":63,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["remove(@param('id",{"_index":241,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["remove(id",{"_index":133,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["removes",{"_index":138,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["repository",{"_index":448,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":881,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Product.html":{}}}],["request",{"_index":84,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request'})@apiresponse({status",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{}}}],["request.method",{"_index":824,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.url",{"_index":825,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["requests",{"_index":919,"title":{},"body":{"classes/LoginDto.html":{},"controllers/ProductController.html":{}}}],["required",{"_index":92,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateUserDto.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["required'})@apiresponse({status",{"_index":123,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["requiredroles",{"_index":1138,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.includes(userrole.name",{"_index":1151,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.join",{"_index":1155,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.length",{"_index":1142,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":842,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1525,"title":{},"body":{"index.html":{}}}],["response",{"_index":426,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["response.interface.ts",{"_index":923,"title":{},"body":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["response.status(status).json(errorresponse",{"_index":838,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["responses",{"_index":430,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["rest",{"_index":579,"title":{},"body":{"injectables/AppService.html":{}}}],["restriction",{"_index":1598,"title":{},"body":{"license.html":{}}}],["results",{"_index":44,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":109,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["retrieves",{"_index":114,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["return",{"_index":222,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["returns",{"_index":101,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["reviewcount",{"_index":934,"title":{},"body":{"entities/Product.html":{}}}],["reviews",{"_index":980,"title":{},"body":{"entities/Product.html":{}}}],["rights",{"_index":1600,"title":{},"body":{"license.html":{}}}],["role",{"_index":197,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"controllers/ProductController.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@isoptional()@isenum(role",{"_index":397,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["role.customer",{"_index":1287,"title":{},"body":{"injectables/UsersService.html":{}}}],["role.users",{"_index":1226,"title":{},"body":{"entities/Users.html":{}}}],["role.users)@jointable",{"_index":1221,"title":{},"body":{"entities/Users.html":{}}}],["rolecounts",{"_index":529,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["rolecounts[role",{"_index":532,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roleentity",{"_index":531,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roleentity?.users?.length",{"_index":533,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roles",{"_index":33,"title":{"entities/Roles.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":215,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["roles.entity",{"_index":1225,"title":{},"body":{"entities/Users.html":{}}}],["roles_key",{"_index":1137,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":194,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["rolesguard)@roles(role.admin)@apibearerauth()@apioperation({summary",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["rolesrepository",{"_index":449,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["role})@isoptional()@isenum(role",{"_index":300,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["route",{"_index":865,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["rules",{"_index":316,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["run",{"_index":1478,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1499,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":748,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["sale",{"_index":161,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["sale')@apioperation({summary",{"_index":160,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["sale'})@apiquery({name",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["scalable",{"_index":1467,"title":{},"body":{"index.html":{}}}],["scale",{"_index":956,"title":{},"body":{"entities/Product.html":{}}}],["scenarios",{"_index":875,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["schema",{"_index":357,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["search",{"_index":371,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":1058,"title":{},"body":{"controllers/ProductController.html":{}}}],["secret",{"_index":625,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":911,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1606,"title":{},"body":{"license.html":{}}}],["seller",{"_index":144,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["seller')@apioperation({summary",{"_index":141,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["sellers",{"_index":1069,"title":{},"body":{"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{}}}],["sellers')@apioperation({summary",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["server",{"_index":1468,"title":{},"body":{"index.html":{}}}],["service",{"_index":444,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["services/admin",{"_index":37,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["services/product.service",{"_index":1053,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductsModule.html":{}}}],["set",{"_index":142,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["setmetadata(roles_key",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1475,"title":{},"body":{"index.html":{}}}],["setuserstatus",{"_index":322,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["setuserstatus(id",{"_index":331,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["shall",{"_index":1615,"title":{},"body":{"license.html":{}}}],["shirt",{"_index":699,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["shirt'})@isstring()@isnotempty",{"_index":722,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["shirt'})@isstring()@isoptional",{"_index":1173,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["shirts",{"_index":1437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shoes",{"_index":1445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["side",{"_index":1469,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":627,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1515,"title":{},"body":{"index.html":{}}}],["single",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["size",{"_index":1083,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["sizes",{"_index":675,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["skip",{"_index":476,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["skirts",{"_index":1441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["software",{"_index":1594,"title":{},"body":{"license.html":{}}}],["sort",{"_index":402,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sortby",{"_index":372,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sorting",{"_index":491,"title":{},"body":{"injectables/AdminUserService.html":{},"classes/ProductQueryDto.html":{}}}],["sortorder",{"_index":373,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sortorder.tolowercase",{"_index":498,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"modules/ProductsModule.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"index.html":{}}}],["specifications",{"_index":676,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["specifying",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1565,"title":{},"body":{"index.html":{}}}],["sportwear",{"_index":1448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1459,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1429,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":1431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.guard.ts",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.module.ts",{"_index":22,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/controllers/admin",{"_index":47,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["src/admin/dto/admin",{"_index":258,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["src/admin/interfaces/paginated",{"_index":922,"title":{},"body":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["src/admin/services/admin",{"_index":442,"title":{},"body":{"injectables/AdminUserService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":541,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":543,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":568,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":571,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":343,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":913,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:19",{"_index":915,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:32",{"_index":917,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guards/jwt",{"_index":341,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":342,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1132,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":1135,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:8",{"_index":1134,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/jwt",{"_index":879,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":886,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:18",{"_index":893,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":895,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/exceptions/http",{"_index":799,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/exceptions/validation",{"_index":1309,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1386,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/products/controllers/product.controller.ts",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/products/controllers/product.controller.ts:103",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:119",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:139",{"_index":1052,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:157",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:50",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:62",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:70",{"_index":1035,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:78",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:86",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/controllers/product.controller.ts:94",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/products/dto/create",{"_index":661,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/product",{"_index":1079,"title":{},"body":{"classes/ProductQueryDto.html":{},"coverage.html":{}}}],["src/products/dto/update",{"_index":1156,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts",{"_index":926,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts:100",{"_index":967,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:104",{"_index":970,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:108",{"_index":948,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:112",{"_index":991,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:15",{"_index":962,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:19",{"_index":973,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:23",{"_index":952,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:27",{"_index":975,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:31",{"_index":958,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:35",{"_index":989,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:39",{"_index":944,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:43",{"_index":984,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:47",{"_index":946,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:51",{"_index":963,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:55",{"_index":965,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:59",{"_index":968,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:63",{"_index":994,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:67",{"_index":979,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:71",{"_index":983,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:80",{"_index":988,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:84",{"_index":941,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:88",{"_index":971,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:92",{"_index":942,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:96",{"_index":969,"title":{},"body":{"entities/Product.html":{}}}],["src/products/enums/product",{"_index":1435,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/products.module.ts",{"_index":1118,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/services/product.service.ts",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["src/users/dto/create",{"_index":763,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1180,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1184,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["src/users/entities/roles.entity",{"_index":34,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{}}}],["src/users/entities/roles.entity.ts",{"_index":1123,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/users/entities/roles.entity.ts:15",{"_index":1126,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:18",{"_index":1128,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:8",{"_index":1124,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/users.entity",{"_index":32,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/Roles.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1203,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:15",{"_index":1210,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:18",{"_index":1209,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:21",{"_index":1215,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:24",{"_index":1206,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1208,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:30",{"_index":1217,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:33",{"_index":1216,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:37",{"_index":1222,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:40",{"_index":1211,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:43",{"_index":1212,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:46",{"_index":1213,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:49",{"_index":1220,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:57",{"_index":1219,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:60",{"_index":1205,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:63",{"_index":1223,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:66",{"_index":1214,"title":{},"body":{"entities/Users.html":{}}}],["src/users/enums/order",{"_index":1200,"title":{},"body":{"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/enums/roles.enum",{"_index":198,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"classes/CreateUserDto.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{}}}],["src/users/enums/roles.enum.ts",{"_index":1456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/users.controller.ts",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:29",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1263,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1267,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:113",{"_index":1278,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":1277,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:160",{"_index":1272,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1270,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1273,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":1274,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":1275,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1480,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1483,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1485,"title":{},"body":{"index.html":{}}}],["started",{"_index":1461,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1473,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":130,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["statistics'})@apiresponse({status",{"_index":129,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["status",{"_index":146,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["status'})@apiparam({name",{"_index":332,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["status'})@apiresponse({status",{"_index":145,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["status'})@isoptional()@isboolean",{"_index":285,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["status'})@isoptional()@type(undefined)@isboolean",{"_index":380,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["statuscode",{"_index":828,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["stay",{"_index":1552,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1497,"title":{},"body":{"index.html":{}}}],["stock",{"_index":730,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["stockquantity",{"_index":677,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["stores",{"_index":1002,"title":{},"body":{"entities/Product.html":{}}}],["storing",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":1512,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":887,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":120,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":314,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["stylish",{"_index":697,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["sub",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":884,"title":{},"body":{"interfaces/JwtPayload.html":{},"license.html":{}}}],["sublicense",{"_index":1604,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1617,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":79,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":131,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["sufficient",{"_index":1153,"title":{},"body":{"guards/RolesGuard.html":{}}}],["suits",{"_index":1449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["summary",{"_index":218,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":862,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":871,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1532,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":1145,"title":{},"body":{"guards/RolesGuard.html":{}}}],["svg",{"_index":1644,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["sweaters",{"_index":1442,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["system",{"_index":929,"title":{},"body":{"entities/Product.html":{}}}],["t",{"_index":432,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateProductDto.html":{}}}],["t_shirts",{"_index":1436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1299,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["template",{"_index":431,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["term",{"_index":399,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["test",{"_index":1488,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1491,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1490,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1486,"title":{},"body":{"index.html":{}}}],["text",{"_index":951,"title":{},"body":{"entities/Product.html":{}}}],["thanks",{"_index":1564,"title":{},"body":{"index.html":{}}}],["thirtydaysago",{"_index":536,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":537,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.adminuserservice.findall(querydto",{"_index":350,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.findone(id",{"_index":353,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getuserstats",{"_index":351,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.toggleuserstatus(id",{"_index":362,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.update(id",{"_index":355,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.appservice.gethello",{"_index":546,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.findone(id",{"_index":512,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.formatnestedvalidationerrors(messages",{"_index":1320,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.formatvalidationerrors(messages",{"_index":1318,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":823,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.productservice.create(createproductdto",{"_index":224,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["this.productservice.findall(query",{"_index":1062,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall(querydto",{"_index":231,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.findone(id",{"_index":236,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["this.productservice.getbestsellers(limit",{"_index":1071,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getfeaturedproducts(limit",{"_index":1065,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getnewarrivals(limit",{"_index":1068,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getonsaleproducts(limit",{"_index":1073,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getproductsbycategory(category",{"_index":1077,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getproductstats",{"_index":233,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.remove(id",{"_index":242,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["this.productservice.toggleactivestatus(id",{"_index":245,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.togglebestsellerstatus(id",{"_index":252,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.togglefeaturedstatus(id",{"_index":248,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.togglenewarrivalstatus(id",{"_index":250,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.toggleonsalestatus(id",{"_index":254,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["this.productservice.update(id",{"_index":239,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":867,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1139,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.findone",{"_index":519,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.count",{"_index":525,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.create",{"_index":1290,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createquerybuilder('user",{"_index":478,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.findandcount",{"_index":1297,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":509,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":1293,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":522,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersrepository.save(user",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers(userquerydto",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(id",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":227,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":508,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["times",{"_index":992,"title":{},"body":{"entities/Product.html":{}}}],["timestamp",{"_index":829,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["togglebestseller",{"_index":64,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglebestseller(id",{"_index":139,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglefeatured",{"_index":65,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglefeatured(id",{"_index":149,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglenewarrival",{"_index":66,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglenewarrival(id",{"_index":153,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["toggleonsale",{"_index":67,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["toggleonsale(id",{"_index":158,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["toggles",{"_index":457,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["togglestatus",{"_index":68,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["togglestatus(id",{"_index":163,"title":{},"body":{"controllers/AdminProductController.html":{}}}],["toggleuserstatus",{"_index":445,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["toggleuserstatus(id",{"_index":455,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["token",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["token'})@apiresponse({status",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["tort",{"_index":1638,"title":{},"body":{"license.html":{}}}],["total",{"_index":420,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{}}}],["totalpages",{"_index":422,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["totalusers",{"_index":524,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["touch",{"_index":1572,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":260,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["transform",{"_index":1112,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["transformer",{"_index":310,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":291,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"classes/CreateProductDto.html":{},"injectables/JwtAuthGuard.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{}}}],["true})@column({length",{"_index":940,"title":{},"body":{"entities/Product.html":{}}}],["true})@column({type",{"_index":954,"title":{},"body":{"entities/Product.html":{}}}],["true})@isboolean()@isoptional",{"_index":1166,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["true})@isoptional",{"_index":1161,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["try",{"_index":221,"title":{},"body":{"controllers/AdminProductController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["tumble",{"_index":686,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["twitter",{"_index":1578,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":833,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["typeorm",{"_index":464,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":29,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1122,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":41,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1472,"title":{},"body":{"index.html":{}}}],["typically",{"_index":885,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["ui",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":219,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":88,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["unauthorizedexception",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('user",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":324,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/ProductQueryDto.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["undefined})@apiresponse({status",{"_index":110,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{}}}],["undefined})@column('varchar",{"_index":945,"title":{},"body":{"entities/Product.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":694,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isarray()@isurl",{"_index":709,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isenum(productcategory",{"_index":691,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isenum(productcategory)@isoptional",{"_index":1159,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["undefined})@isobject()@isoptional",{"_index":728,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isoptional()@isstring",{"_index":404,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["undefined})@isstring()@isoptional",{"_index":1110,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["underwear",{"_index":1447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unique",{"_index":959,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["unit",{"_index":1487,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":117,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":1653,"title":{},"body":{"properties.html":{}}}],["update",{"_index":69,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1078,"title":{},"body":{"controllers/ProductController.html":{}}}],["update(id",{"_index":167,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["updated",{"_index":147,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["updated'})@apiresponse({status",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated'})@updatedatecolumn",{"_index":990,"title":{},"body":{"entities/Product.html":{}}}],["updatedat",{"_index":935,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["updatedatecolumn",{"_index":998,"title":{},"body":{"entities/Product.html":{},"entities/Users.html":{}}}],["updatedto",{"_index":337,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["updatedto.role",{"_index":518,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["updateproductdto",{"_index":168,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/AdminProductController.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateprofileimage",{"_index":1269,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofileimage(id",{"_index":1276,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":171,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{},"index.html":{}}}],["updateuser",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":354,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AdminUserController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.password",{"_index":1302,"title":{},"body":{"injectables/UsersService.html":{}}}],["updating",{"_index":174,"title":{},"body":{"controllers/AdminProductController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/ProductController.html":{}}}],["url",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["urls",{"_index":708,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["use",{"_index":912,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"license.html":{}}}],["usefactory",{"_index":567,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":179,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":214,"title":{},"body":{"controllers/AdminProductController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductController.html":{}}}],["user",{"_index":262,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":276,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{}}}],["user'})@apiresponse({status",{"_index":327,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["user.controller",{"_index":36,"title":{},"body":{"modules/AdminModule.html":{}}}],["user.controller.ts",{"_index":319,"title":{},"body":{"controllers/AdminUserController.html":{},"coverage.html":{}}}],["user.controller.ts:111",{"_index":336,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:47",{"_index":326,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:54",{"_index":330,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:69",{"_index":329,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:85",{"_index":338,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.dto",{"_index":340,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":259,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":776,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":283,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:29",{"_index":779,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":295,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:40",{"_index":275,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":774,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":279,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:58",{"_index":297,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":786,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:67",{"_index":301,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":781,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":286,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:85",{"_index":288,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:94",{"_index":293,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":484,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["user.firstname",{"_index":482,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.id",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isactive",{"_index":523,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.lastloginat",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.lastname",{"_index":483,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.password",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.profileimage",{"_index":1305,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles",{"_index":521,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{}}}],["user.roles.some",{"_index":1149,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles[0]?.name",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":38,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["user.service.ts",{"_index":443,"title":{},"body":{"injectables/AdminUserService.html":{},"coverage.html":{}}}],["user.service.ts:153",{"_index":453,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:171",{"_index":458,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:20",{"_index":450,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:200",{"_index":456,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:206",{"_index":454,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:33",{"_index":452,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user@example.com",{"_index":920,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":914,"title":{},"body":{"classes/LoginDto.html":{}}}],["userquerydto",{"_index":1183,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":451,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1150,"title":{},"body":{"guards/RolesGuard.html":{}}}],["users",{"_index":31,"title":{"entities/Users.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiquery({name",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["users'})@apiresponse({status",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1264,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/enums/roles.enum",{"_index":415,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["users/users.module",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1227,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":552,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usersservice",{"_index":1248,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":903,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["uuid",{"_index":356,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["uuid'})@apibody({schema",{"_index":334,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["valid",{"_index":785,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["validate",{"_index":468,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":894,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":897,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":739,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validates",{"_index":890,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":315,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerror",{"_index":1310,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerroritem",{"_index":1308,"title":{"interfaces/ValidationErrorItem.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validationerrors",{"_index":1315,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationexceptionfilter",{"_index":1312,"title":{"classes/ValidationExceptionFilter.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validator",{"_index":308,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["validsortfields",{"_index":492,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortfields.includes(sortby",{"_index":495,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortorder",{"_index":493,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortorder.includes(sortorder.tolowercase",{"_index":497,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["value",{"_index":387,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":1207,"title":{},"body":{"entities/Users.html":{}}}],["variable",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":907,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":287,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["verifiedusers",{"_index":527,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["version",{"_index":1651,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1540,"title":{},"body":{"index.html":{}}}],["viewcount",{"_index":936,"title":{},"body":{"entities/Product.html":{}}}],["viewed",{"_index":993,"title":{},"body":{"entities/Product.html":{}}}],["viewing",{"_index":1059,"title":{},"body":{"controllers/ProductController.html":{}}}],["visit",{"_index":1529,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1543,"title":{},"body":{"index.html":{}}}],["void",{"_index":812,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["warranties",{"_index":1623,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1619,"title":{},"body":{"license.html":{}}}],["wash",{"_index":684,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["watch",{"_index":1481,"title":{},"body":{"index.html":{}}}],["wear",{"_index":742,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["wear.'})@isstring()@isnotempty",{"_index":702,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["wear.'})@isstring()@isoptional",{"_index":1163,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["website",{"_index":1576,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":573,"title":{},"body":{"injectables/AppService.html":{}}}],["wherecondition",{"_index":1295,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":712,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"license.html":{}}}],["white",{"_index":753,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["without",{"_index":1597,"title":{},"body":{"license.html":{}}}],["working",{"_index":1528,"title":{},"body":{"index.html":{}}}],["x",{"_index":1555,"title":{},"body":{"index.html":{}}}],["xl",{"_index":751,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["yes",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{}}}],["you'd",{"_index":1568,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1492,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":770,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":1329,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["za",{"_index":1328,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AdminModule_exports\n\n\n\n\nProductsModule\n\nProductsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\n\n\nAdminUserService \n\nAdminUserService \n\nAdminUserService  -->\n\nAdminModule->AdminUserService \n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminUserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminUserController\n                        \n                        \n                            AdminProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProductsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Roles } from 'src/users/entities/roles.entity';\nimport { AdminUserController } from './controllers/admin-user.controller';\nimport { AdminUserService } from './services/admin-user.service';\nimport { ProductsModule } from '../products/products.module';\nimport { AdminProductController } from './controllers/admin-product.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users, Roles]),\n    ProductsModule,\n  ],\n  controllers: [AdminUserController, AdminProductController],\n  providers: [AdminUserService],\n  exports: [AdminUserService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminProductController.html":{"url":"controllers/AdminProductController.html","title":"controller - AdminProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/products\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing products from the admin perspective.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new product'})@ApiResponse({status: 201, description: 'Product created successfully', type: Product})@ApiResponse({status: 400, description: 'Bad request - Invalid product data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Creates a new product.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating a new product\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The created product\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: ProductQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all products with filtering and pagination'})@ApiResponse({status: 200, description: 'Products retrieved successfully', type: undefined})@ApiResponse({status: 400, description: 'Bad request - Invalid query parameters'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Retrieves all products with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            ProductQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nQuery parameters for filtering and pagination\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - Products and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a product by ID'})@ApiResponse({status: 200, description: 'Product retrieved successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Retrieves a product by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The found product\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@ApiOperation({summary: 'Get product statistics'})@ApiResponse({status: 200, description: 'Product statistics retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a product'})@ApiResponse({status: 200, description: 'Product deleted successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:129\n                        \n                    \n\n\n            \n                \n                        Removes a product.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleBestSeller\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleBestSeller(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/best-seller')@ApiOperation({summary: 'Set product best seller status'})@ApiResponse({status: 200, description: 'Product best seller status updated successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFeatured(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/feature')@ApiOperation({summary: 'Set product featured status'})@ApiResponse({status: 200, description: 'Product featured status updated successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleNewArrival\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleNewArrival(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/new-arrival')@ApiOperation({summary: 'Set product new arrival status'})@ApiResponse({status: 200, description: 'Product new arrival status updated successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleOnSale(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/on-sale')@ApiOperation({summary: 'Set product on sale status'})@ApiResponse({status: 200, description: 'Product on sale status updated successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleStatus(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Set product active status'})@ApiResponse({status: 200, description: 'Product status updated successfully', type: Product})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a product'})@ApiResponse({status: 200, description: 'Product updated successfully', type: Product})@ApiResponse({status: 400, description: 'Bad request - Invalid update data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-product.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates a product's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating the product\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The updated product\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  UseGuards,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n  BadRequestException,\n} from '@nestjs/common';\nimport { ProductService } from '../../products/services/product.service';\nimport { CreateProductDto } from '../../products/dto/create-product.dto';\nimport { UpdateProductDto } from '../../products/dto/update-product.dto';\nimport { ProductQueryDto } from '../../products/dto/product-query.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiSecurity, ApiBearerAuth } from '@nestjs/swagger';\nimport { Product } from '../../products/entities/product.entity';\n\n/**\n * Controller for managing products from the admin perspective.\n * @class AdminProductController\n * @description Handles administrative operations for product management.\n */\n@ApiTags('Admin - Products')\n@ApiBearerAuth()\n@Controller('admin/products')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  /**\n   * Creates a new product.\n   * @param createProductDto - Data for creating a new product\n   * @returns Promise - The created product\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create a new product' })\n  @ApiResponse({ status: 201, description: 'Product created successfully', type: Product })\n  @ApiResponse({ status: 400, description: 'Bad request - Invalid product data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  async create(@Body() createProductDto: CreateProductDto): Promise {\n    try {\n      return await this.productService.create(createProductDto);\n    } catch (error) {\n      throw new BadRequestException(`Error creating product: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieves all products with optional filtering and pagination.\n   * @param queryDto - Query parameters for filtering and pagination\n   * @returns Promise - Products and pagination metadata\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all products with filtering and pagination' })\n  @ApiResponse({ status: 200, description: 'Products retrieved successfully', type: [Product] })\n  @ApiResponse({ status: 400, description: 'Bad request - Invalid query parameters' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  async findAll(@Query() queryDto: ProductQueryDto) {\n    return this.productService.findAll(queryDto);\n  }\n\n  @Get('stats')\n  @ApiOperation({ summary: 'Get product statistics' })\n  @ApiResponse({ status: 200, description: 'Product statistics retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  async getStats() {\n    return this.productService.getProductStats();\n  }\n\n  /**\n   * Retrieves a product by ID.\n   * @param id - Product ID\n   * @returns Promise - The found product\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a product by ID' })\n  @ApiResponse({ status: 200, description: 'Product retrieved successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async findOne(@Param('id', ParseUUIDPipe) id: string): Promise {\n    return this.productService.findOne(id);\n  }\n\n  /**\n   * Updates a product's information.\n   * @param id - Product ID\n   * @param updateProductDto - Data for updating the product\n   * @returns Promise - The updated product\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a product' })\n  @ApiResponse({ status: 200, description: 'Product updated successfully', type: Product })\n  @ApiResponse({ status: 400, description: 'Bad request - Invalid update data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ): Promise {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /**\n   * Removes a product.\n   * @param id - Product ID\n   * @returns Promise\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a product' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async remove(@Param('id', ParseUUIDPipe) id: string): Promise {\n    return this.productService.remove(id);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Set product active status' })\n  @ApiResponse({ status: 200, description: 'Product status updated successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleStatus(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise {\n    const product = await this.productService.findOne(id);\n    return this.productService.toggleActiveStatus(id, !product.isActive);\n  }\n\n  @Patch(':id/feature')\n  @ApiOperation({ summary: 'Set product featured status' })\n  @ApiResponse({ status: 200, description: 'Product featured status updated successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleFeatured(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise {\n    const product = await this.productService.findOne(id);\n    return this.productService.toggleFeaturedStatus(id, !product.isFeatured);\n  }\n\n  @Patch(':id/new-arrival')\n  @ApiOperation({ summary: 'Set product new arrival status' })\n  @ApiResponse({ status: 200, description: 'Product new arrival status updated successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleNewArrival(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise {\n    const product = await this.productService.findOne(id);\n    return this.productService.toggleNewArrivalStatus(id, !product.isNewArrival);\n  }\n\n  @Patch(':id/best-seller')\n  @ApiOperation({ summary: 'Set product best seller status' })\n  @ApiResponse({ status: 200, description: 'Product best seller status updated successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleBestSeller(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise {\n    const product = await this.productService.findOne(id);\n    return this.productService.toggleBestSellerStatus(id, !product.isBestSeller);\n  }\n\n  @Patch(':id/on-sale')\n  @ApiOperation({ summary: 'Set product on sale status' })\n  @ApiResponse({ status: 200, description: 'Product on sale status updated successfully', type: Product })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleOnSale(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise {\n    const product = await this.productService.findOne(id);\n    return this.productService.toggleOnSaleStatus(id, !product.isOnSale);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for updating user information by admin.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isPhoneVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User date of birth'})@IsOptional()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    User's date of birth.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address'})@IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:49\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User first name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    User's first name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User active status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    User's active status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email verification status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:85\n                        \n                    \n\n            \n                \n                    User's email verification status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone verification status', example: true, required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    User's last name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User phone number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:58\n                        \n                    \n\n            \n                \n                    User's phone number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User role', enum: Role})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:67\n                        \n                    \n\n            \n                \n                    User's role.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEmail, IsEnum, IsOptional, IsString, IsUUID } from 'class-validator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsDate } from 'class-validator';\n\n/**\n * Data Transfer Object for updating user information by admin.\n * @class AdminUpdateUserDto\n * @description Defines the structure and validation rules for admin user updates.\n */\nexport class AdminUpdateUserDto {\n  /**\n   * User's first name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  /**\n   * User's last name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  /**\n   * User's date of birth.\n   * @type {Date}\n   */\n  @ApiPropertyOptional({ description: 'User date of birth' })\n  @IsOptional()\n  @Type(() => Date)\n  @IsDate()\n  dob?: Date;\n\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User email address' })\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n\n  /**\n   * User's phone number.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User phone number' })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  /**\n   * User's role.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ description: 'User role', enum: Role })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * User's active status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User active status' })\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n\n  /**\n   * User's email verification status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User email verification status' })\n  @IsOptional()\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiProperty({\n    description: 'User phone verification status',\n    example: true,\n    required: false\n  })\n  @IsOptional()\n  @IsBoolean()\n  isPhoneVerified?: boolean;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUserController.html":{"url":"controllers/AdminUserController.html","title":"controller - AdminUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/users\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing users from the admin perspective.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getUserStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                setUserStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users with filtering and pagination'})@ApiResponse({status: undefined, description: 'Returns users list with pagination'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise> - Users and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a user by ID'})@ApiResponse({status: undefined, description: 'Returns the user'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The found user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getUserStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@ApiOperation({summary: 'Get user statistics'})@ApiResponse({status: undefined, description: 'Returns user statistics'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        setUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUserStatus(id: string, isActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Set user active status'})@ApiParam({name: 'id', description: 'User ID', type: 'string', format: 'uuid'})@ApiBody({schema: undefined})@ApiResponse({status: undefined, description: 'User status updated successfully'})@ApiResponse({status: undefined, description: 'User not found'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user'})@ApiResponse({status: undefined, description: 'Returns the updated user'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:85\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        // admin-user.controller.ts\nimport {\n  Controller,\n  Get,\n  Patch,\n  Param,\n  Body,\n  Query,\n  UseGuards,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport { AdminUserService } from '../services/admin-user.service';\nimport { AdminUpdateUserDto } from '../dto/admin-user.dto';\nimport { AdminUserQueryDto } from '../dto/admin-user-query.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard'; \nimport { Roles } from 'src/auth/decorators/roles.decorator'; \nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiTags, ApiOperation, ApiResponse, ApiSecurity, ApiParam, ApiBody, ApiBearerAuth } from '@nestjs/swagger';\n\n/**\n * Controller for managing users from the admin perspective.\n * @class AdminUserController\n * @description Handles administrative operations for user management.\n */\n@ApiTags('Admin - Users')\n@ApiSecurity('bearer')\n@Controller('admin/users')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\n@ApiBearerAuth()\nexport class AdminUserController {\n  constructor(private readonly adminUserService: AdminUserService) {}\n\n  /**\n   * Retrieves all users with optional filtering and pagination.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise> - Users and pagination metadata\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all users with filtering and pagination' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns users list with pagination' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  async findAll(@Query() queryDto: AdminUserQueryDto) {\n    return this.adminUserService.findAll(queryDto);\n  }\n\n  @Get('stats')\n  @ApiOperation({ summary: 'Get user statistics' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns user statistics' })\n  async getUserStats() {\n    return this.adminUserService.getUserStats();\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - User ID\n   * @returns Promise - The found user\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a user by ID' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns the user' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.adminUserService.findOne(id);\n  }\n\n  /**\n   * Updates a user's information.\n   * @param id - User ID\n   * @param updateUserDto - Data for updating the user\n   * @returns Promise - The updated user\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns the updated user' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateDto: AdminUpdateUserDto,\n  ) {\n    return this.adminUserService.update(id, updateDto);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Set user active status' })\n  @ApiParam({ name: 'id', description: 'User ID', type: 'string', format: 'uuid' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        isActive: {\n          type: 'boolean',\n          description: 'Set to true to activate the user, false to deactivate',\n          example: true\n        }\n      },\n      required: ['isActive']\n    }\n  })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User status updated successfully' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  @HttpCode(HttpStatus.OK)\n  async setUserStatus(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('isActive') isActive: boolean,\n  ) {\n    return this.adminUserService.toggleUserStatus(id, isActive);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUserQueryDto.html":{"url":"classes/AdminUserQueryDto.html","title":"class - AdminUserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for admin user queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by active status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:120\n                        \n                    \n\n            \n                \n                    Active status filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by email verification status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page', default: 10})@IsOptional()@Type(undefined)@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:92\n                        \n                    \n\n            \n                \n                    Number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', default: 1})@IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:79\n                        \n                    \n\n            \n                \n                    Page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: Role, description: 'Filter by user role'})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:110\n                        \n                    \n\n            \n                \n                    Role filter for users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search term for firstName, lastName, or email'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:101\n                        \n                    \n\n            \n                \n                    Search term for filtering users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort by field', enum: undefined})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"asc\" | \"desc\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order', enum: undefined, default: 'desc'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:163\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminUserService.html":{"url":"injectables/AdminUserService.html","title":"injectable - AdminUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/services/admin-user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users from the admin perspective.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserStats\n                            \n                            \n                                    Async\n                                toggleUserStatus\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/admin/services/admin-user.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Promise> - Users and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The found user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleUserStatus(id: string, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:200\n                        \n                    \n\n\n            \n                \n                        Toggles a user's active status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, ILike, FindOptionsWhere } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Roles } from 'src/users/entities/roles.entity';\nimport { AdminUpdateUserDto } from '../dto/admin-user.dto';\nimport { AdminUserQueryDto, PaginatedResponse } from '../dto/admin-user-query.dto';\nimport { Role } from 'src/users/enums/roles.enum';\n\n/**\n * Service for managing users from the admin perspective.\n * @class AdminUserService\n * @description Handles administrative operations for user management.\n */\n@Injectable()\nexport class AdminUserService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly userRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Retrieves all users with optional filtering and pagination.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise> - Users and pagination metadata\n   */\n  async findAll(queryDto: AdminUserQueryDto): Promise> {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search,\n        role,\n        isActive,\n        isEmailVerified,\n        createdAfter,\n        createdBefore,\n        lastLoginAfter,\n        lastLoginBefore,\n        sortBy = 'createdAt',\n        sortOrder = 'desc',\n      } = queryDto;\n\n      // Validate pagination parameters\n      if (isNaN(page) || page  new Date(createdBefore)) {\n        throw new BadRequestException('Created after date cannot be later than created before date');\n      }\n      if (lastLoginAfter && lastLoginBefore && new Date(lastLoginAfter) > new Date(lastLoginBefore)) {\n        throw new BadRequestException('Last login after date cannot be later than last login before date');\n      }\n\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n      // Apply filters\n      if (search) {\n        queryBuilder.andWhere(\n          '(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)',\n          { search: `%${search}%` }\n        );\n      }\n\n      if (role) {\n        queryBuilder.andWhere('user.role = :role', { role });\n      }\n\n      if (isActive !== undefined) {\n        queryBuilder.andWhere('user.isActive = :isActive', { isActive });\n      }\n\n      if (isEmailVerified !== undefined) {\n        queryBuilder.andWhere('user.isEmailVerified = :isEmailVerified', { isEmailVerified });\n      }\n\n      if (createdAfter || createdBefore) {\n        queryBuilder.andWhere('user.createdAt BETWEEN :createdAfter AND :createdBefore', {\n          createdAfter: createdAfter || new Date(0),\n          createdBefore: createdBefore || new Date(),\n        });\n      }\n\n      if (lastLoginAfter || lastLoginBefore) {\n        queryBuilder.andWhere('user.lastLoginAt BETWEEN :lastLoginAfter AND :lastLoginBefore', {\n          lastLoginAfter: lastLoginAfter || new Date(0),\n          lastLoginBefore: lastLoginBefore || new Date(),\n        });\n      }\n\n      // Validate and apply sorting\n      const validSortFields = ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role'];\n      const validSortOrder = ['asc', 'desc'];\n\n      const finalSortBy = validSortFields.includes(sortBy) ? sortBy : 'createdAt';\n      const finalSortOrder = validSortOrder.includes(sortOrder.toLowerCase()) \n        ? sortOrder.toLowerCase() \n        : 'desc';\n\n      queryBuilder.orderBy(`user.${finalSortBy}`, finalSortOrder.toUpperCase() as 'ASC' | 'DESC');\n      queryBuilder.skip(skip).take(limit);\n\n      const [items, total] = await queryBuilder.getManyAndCount();\n\n      if (total === 0) {\n        return {\n          items: [],\n          meta: {\n            total: 0,\n            page,\n            limit,\n            totalPages: 0,\n            message: 'No users found matching the criteria'\n          },\n        };\n      }\n\n      return {\n        items,\n        meta: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit),\n        },\n      };\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      throw new BadRequestException(`Error processing user query: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - User ID\n   * @returns Promise - The found user\n   * @throws NotFoundException - If user is not found\n   */\n  async findOne(id: string): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  /**\n   * Updates a user's information.\n   * @param id - User ID\n   * @param updateDto - Data for updating the user\n   * @returns Promise - The updated user\n   * @throws NotFoundException - If user is not found\n   */\n  async update(id: string, updateDto: AdminUpdateUserDto): Promise {\n    const user = await this.findOne(id);\n\n    // Update basic fields\n    Object.assign(user, updateDto);\n\n    // Handle role update if provided\n    if (updateDto.role) {\n      const role = await this.rolesRepository.findOne({\n        where: { name: updateDto.role },\n      });\n\n      if (!role) {\n        throw new BadRequestException(`Role ${updateDto.role} not found`);\n      }\n\n      // Set the new role\n      user.roles = [role];\n    }\n\n    return this.userRepository.save(user);\n  }\n\n  /**\n   * Toggles a user's active status.\n   * @param id - User ID\n   * @returns Promise - The updated user\n   * @throws NotFoundException - If user is not found\n   */\n  async toggleUserStatus(id: string, isActive: boolean): Promise {\n    const user = await this.findOne(id);\n    user.isActive = isActive;\n    return this.userRepository.save(user);\n  }\n\n  async getUserStats(): Promise {\n    const totalUsers = await this.userRepository.count();\n    const activeUsers = await this.userRepository.count({\n      where: { isActive: true },\n    });\n    const verifiedUsers = await this.userRepository.count({\n      where: { isEmailVerified: true },\n    });\n\n    // Count by role\n    const roleCounts = {};\n    const roles = Object.values(Role);\n\n    for (const role of roles) {\n      const roleEntity = await this.rolesRepository.findOne({\n        where: { name: role },\n        relations: ['users'],\n      });\n\n      roleCounts[role] = roleEntity?.users?.length || 0;\n    }\n\n    // Get new users in the last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const newUsers = await this.userRepository.count({\n      where: {\n        createdAt: Between(thirtyDaysAgo, new Date()),\n      },\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      verifiedUsers,\n      newUsers,\n      roleCounts,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport dbConfig from './config/db.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AdminModule } from './admin/admin.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      expandVariables: true,\n      load: [dbConfig],\n    }),\n    TypeOrmModule.forRootAsync({ useFactory: dbConfig }),\n    AdminModule,\n    UsersModule,\n    AuthModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Main application service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Returns a greeting message.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A welcome message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Main application service.\n * @class AppService\n * @description Handles core application functionality and health checks.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a greeting message.\n   * @returns {string} A welcome message\n   */\n  getHello(): string {\n    return 'Welcome to Elvate REST API';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login', description: 'Authenticate user and return JWT token'})@ApiResponse({status: 200, description: 'Successfully authenticated'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT token for authenticated user\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/auth/auth.controller.ts\nimport { Controller, Post, Body, HttpCode, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Controller handling authentication endpoints.\n * @class AuthController\n * @description Manages user authentication routes including login.\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT token for authenticated user\n   */\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login', description: 'Authenticate user and return JWT token' })\n  @ApiResponse({ status: 200, description: 'Successfully authenticated' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nRolesGuard \n\nRolesGuard \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            RolesGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users]),\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN', '1d'),\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [JwtStrategy, JwtAuthGuard, RolesGuard, AuthService],\n  exports: [JwtModule, JwtAuthGuard, RolesGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service handling authentication operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and generates a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT token for authenticated user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, InternalServerErrorException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Service handling authentication operations.\n * @class AuthService\n * @description Manages user authentication, including login and token generation.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticates a user and generates a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT token for authenticated user\n   * @throws UnauthorizedException - If credentials are invalid\n   */\n  async login(loginDto: LoginDto) {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email: loginDto.email },\n        relations: ['roles'],\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      const isPasswordValid = await bcrypt.compare(loginDto.password, user.password);\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      if (!user.isActive) {\n        throw new UnauthorizedException('User is inactive');\n      }\n\n      // Update last login time\n      user.lastLoginAt = new Date();\n      await this.usersRepository.save(user);\n\n      const payload = { \n        sub: user.id, \n        email: user.email, \n        role: user.roles[0]?.name || 'USER' \n      };\n\n      return {\n        access_token: this.jwtService.sign(payload),\n      };\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Error during login');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                stockQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, tumble dry low'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product category', enum: ProductCategory, example: undefined})@IsEnum(ProductCategory)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product description', example: 'A comfortable and stylish cotton t-shirt perfect for everyday wear.'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discounted price (if on sale)', example: 24.99})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product image URLs', example: undefined})@IsArray()@IsUrl({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is featured', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is on sale', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '100% Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product name', example: 'Classic Cotton T-Shirt'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product price', example: 29.99})@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Stock quantity', example: 100})@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, Max, IsObject, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Product name',\n    example: 'Classic Cotton T-Shirt'\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Product description',\n    example: 'A comfortable and stylish cotton t-shirt perfect for everyday wear.'\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    description: 'Product price',\n    example: 29.99\n  })\n  @IsNumber()\n  @Min(0)\n  price: number;\n\n  @ApiPropertyOptional({\n    description: 'Discounted price (if on sale)',\n    example: 24.99\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  discountedPrice?: number;\n\n  @ApiProperty({\n    description: 'Stock quantity',\n    example: 100\n  })\n  @IsNumber()\n  @Min(0)\n  stockQuantity: number;\n\n  @ApiProperty({\n    description: 'Product category',\n    enum: ProductCategory,\n    example: ProductCategory.T_SHIRTS\n  })\n  @IsEnum(ProductCategory)\n  category: ProductCategory;\n\n  @ApiProperty({\n    description: 'Available sizes',\n    example: ['S', 'M', 'L', 'XL']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  sizes: string[];\n\n  @ApiProperty({\n    description: 'Available colors',\n    example: ['Black', 'White', 'Navy']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  colors: string[];\n\n  @ApiProperty({\n    description: 'Product image URLs',\n    example: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg']\n  })\n  @IsArray()\n  @IsUrl({}, { each: true })\n  images: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { 'Fabric': '100% Cotton', 'Fit': 'Regular' }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '100% Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, tumble dry low'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is featured',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is on sale',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                profileImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date of birth in ISO format', example: '1990-01-01'})@IsNotEmpty()@IsDateString({}, {message: 'Date of Birth must be in ISO format (YYYY-MM-DD)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'john.doe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number (Bangladeshi format)', example: '+8801712345678', required: false})@IsOptional()@IsString()@IsPhoneNumber('BD', {message: 'Phone number must be a valid Bangladeshi phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL to user profile image', example: 'https://example.com/profile.jpg', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User role', enum: Role, required: false})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsEnum,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John'\n  })\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiProperty({\n    description: 'Date of birth in ISO format',\n    example: '1990-01-01'\n  })\n  @IsNotEmpty()\n  @IsDateString(\n    {},\n    { message: 'Date of Birth must be in ISO format (YYYY-MM-DD)' },\n  )\n  dob: Date;\n\n  @ApiProperty({\n    description: 'User email address',\n    example: 'john.doe@example.com'\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'User phone number (Bangladeshi format)',\n    example: '+8801712345678',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  @IsPhoneNumber('BD', {\n    message: 'Phone number must be a valid Bangladeshi phone number',\n  })\n  phone?: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123'\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({\n    description: 'User role',\n    enum: Role,\n    required: false\n  })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  @ApiProperty({\n    description: 'URL to user profile image',\n    example: 'https://example.com/profile.jpg',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/http-exception.filter.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/http-exception.filter.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(HttpExceptionFilter.name);\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: typeof exceptionResponse === 'string' \n        ? exceptionResponse \n        : (exceptionResponse as any).message || exception.message,\n      error: (exceptionResponse as any).error || HttpStatus[status],\n    };\n\n    response.status(status).json(errorResponse);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard.\nProtects routes by requiring a valid JWT token in the request.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * JWT Authentication Guard.\n * @class JwtAuthGuard\n * @description Extends Passport's AuthGuard to implement JWT-based authentication.\n * Protects routes by requiring a valid JWT token in the request.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    // Check for public route metadata\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    // Continue with JWT validation\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw custom exceptions based on different scenarios\n    if (err || !user) {\n      throw err || new UnauthorizedException('Invalid token or token expired');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the JWT payload structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Token expiration timestamp\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject - typically the user ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject - typically the user ID\n   * @type {string}\n   */\n  sub: string;\n\n  /**\n   * User's email address\n   * @type {string}\n   */\n  email: string;\n\n  /**\n   * User's role\n   * @type {string}\n   */\n  role: string;\n\n  /**\n   * Token expiration timestamp\n   * @type {number}\n   */\n  exp?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Strategy for handling authentication.\nExtracts JWT from request headers and validates the token.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing user information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The validated payload\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';  // Import JwtPayload interface\n\n/**\n * JWT Strategy for handling authentication.\n * @class JwtStrategy\n * @description Implements JWT-based authentication strategy using Passport.\n * Extracts JWT from request headers and validates the token.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n  ) {\n    const jwtSecret = configService.get('JWT_SECRET');\n    \n    if (!jwtSecret) {\n      throw new Error('JWT_SECRET is not defined in the environment variables');\n    }\n    \n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtSecret,\n    });\n  }\n\n  /**\n   * Validates the JWT payload.\n   * @param payload - The JWT payload containing user information\n   * @returns The validated payload\n   */\n  async validate(payload: JwtPayload) {  // Use the JwtPayload type\n    const { sub: id } = payload;\n    \n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    if (!user.isActive) {\n      throw new UnauthorizedException('User is inactive');\n    }\n\n    // Update last login time\n    user.lastLoginAt = new Date();\n    await this.usersRepository.save(user);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for user login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:19\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:32\n                        \n                    \n\n            \n                \n                    User's password.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from \"class-validator\"\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Data Transfer Object for user login.\n * @class LoginDto\n * @description Defines the structure and validation rules for login requests.\n */\nexport class LoginDto {\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User email address',\n    example: 'user@example.com'\n  })\n  @IsEmail()\n  email: string;\n\n  /**\n   * User's password.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123'\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse.html":{"url":"interfaces/PaginatedResponse.html","title":"interface - PaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse-1.html":{"url":"interfaces/PaginatedResponse-1.html","title":"interface - PaginatedResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta.html":{"url":"interfaces/PaginationMeta.html","title":"interface - PaginationMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional message associated with the pagination metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta-1.html":{"url":"interfaces/PaginationMeta-1.html","title":"interface - PaginationMeta-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Product entity representing a product in the e-commerce system.\npricing, inventory, and categorization.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                brand\n                            \n                            \n                                    \n                                    \n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                material\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                rating\n                            \n                            \n                                    \n                                    \n                                reviewCount\n                            \n                            \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                specifications\n                            \n                            \n                                    \n                                    \n                                stockQuantity\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                viewCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product brand name', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product care instructions', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The category of the product', enum: ProductCategory})@Column({type: 'enum', enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was created'})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The detailed description of the product'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true})@Column({type: 'decimal', precision: 10, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the product'})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product images URLs', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is currently active', type: 'boolean', default: true})@Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a best seller', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is featured', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a new arrival', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is on sale', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product material', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the product', maxLength: 100})@Column({length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The price of the product', type: 'number', format: 'decimal'})@Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Average product rating', type: 'number', format: 'decimal', default: 0})@Column({type: 'decimal', precision: 3, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reviewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of product reviews', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product specifications in JSON format', type: 'object', additionalProperties: true, nullable: true})@Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current stock quantity of the product', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was last updated'})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        viewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the product has been viewed', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, ManyToOne, OneToMany, JoinColumn } from 'typeorm';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Product entity representing a product in the e-commerce system.\n * @class Product\n * @description This entity stores all product-related information including basic details,\n * pricing, inventory, and categorization.\n */\n@Entity('products')\nexport class Product {\n  @ApiProperty({ description: 'The unique identifier of the product' })\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty({ description: 'The name of the product', maxLength: 100 })\n  @Column({ length: 100 })\n  name: string;\n\n  @ApiProperty({ description: 'The detailed description of the product' })\n  @Column({ type: 'text' })\n  description: string;\n\n  @ApiProperty({ description: 'The price of the product', type: 'number', format: 'decimal' })\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ApiProperty({ description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true })\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })\n  discountedPrice: number;\n\n  @ApiProperty({ description: 'The current stock quantity of the product', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  stockQuantity: number;\n\n  @ApiProperty({ description: 'The category of the product', enum: ProductCategory })\n  @Column({ type: 'enum', enum: ProductCategory })\n  category: ProductCategory;\n\n  @ApiProperty({ description: 'Available sizes for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  sizes: string[];\n\n  @ApiProperty({ description: 'Available colors for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  colors: string[];\n\n  @ApiProperty({ description: 'Product images URLs', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  images: string[];\n\n  @ApiProperty({ description: 'Whether the product is currently active', type: 'boolean', default: true })\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @ApiProperty({ description: 'Whether the product is featured', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isFeatured: boolean;\n\n  @ApiProperty({ description: 'Number of times the product has been viewed', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  viewCount: number;\n\n  @ApiProperty({ description: 'Average product rating', type: 'number', format: 'decimal', default: 0 })\n  @Column({ type: 'decimal', precision: 3, scale: 2, default: 0 })\n  rating: number;\n\n  @ApiProperty({ description: 'Number of product reviews', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  reviewCount: number;\n\n  @ApiProperty({ \n    description: 'Product specifications in JSON format', \n    type: 'object',\n    additionalProperties: true,\n    nullable: true \n  })\n  @Column({ type: 'jsonb', nullable: true })\n  specifications: Record;\n\n  @ApiProperty({ description: 'Product brand name', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  brand: string;\n\n  @ApiProperty({ description: 'Product material', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  material: string;\n\n  @ApiProperty({ description: 'Product care instructions', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  careInstructions: string;\n\n  @ApiProperty({ description: 'Whether the product is a new arrival', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isNewArrival: boolean;\n\n  @ApiProperty({ description: 'Whether the product is a best seller', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isBestSeller: boolean;\n\n  @ApiProperty({ description: 'Whether the product is on sale', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isOnSale: boolean;\n\n  @ApiProperty({ description: 'The date when the product was created' })\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty({ description: 'The date when the product was last updated' })\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/controllers/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n            \n                Description\n            \n            \n                Controller handling product-related HTTP requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getBestSellers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFeaturedProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getNewArrivals\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOnSaleProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getProductsByCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ADMIN)@ApiBearerAuth()@ApiOperation({summary: 'Create a new product'})@ApiResponse({status: 201, description: 'Product successfully created'})@ApiResponse({status: 400, description: 'Bad request'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Creates a new product.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating a new product\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise - The created product\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: ProductQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all products with optional filtering'})@ApiResponse({status: 200, description: 'Products retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        Retrieves all products with optional filtering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            ProductQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nQuery parameters for filtering and pagination\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise - Products and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a product by ID'})@ApiResponse({status: 200, description: 'Product retrieved successfully'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:119\n                        \n                    \n\n\n            \n                \n                        Retrieves a product by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise - The found product\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getBestSellers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBestSellers(limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('best-sellers')@ApiOperation({summary: 'Get best seller products'})@ApiQuery({name: 'limit', required: false, description: 'Number of products to return', type: Number})@ApiResponse({status: undefined, description: 'Returns best seller products'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getFeaturedProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFeaturedProducts(limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('featured')@ApiOperation({summary: 'Get featured products'})@ApiQuery({name: 'limit', required: false, description: 'Number of products to return', type: Number})@ApiResponse({status: undefined, description: 'Returns featured products'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getNewArrivals\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewArrivals(limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('new-arrivals')@ApiOperation({summary: 'Get new arrival products'})@ApiQuery({name: 'limit', required: false, description: 'Number of products to return', type: Number})@ApiResponse({status: undefined, description: 'Returns new arrival products'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOnSaleProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnSaleProducts(limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('on-sale')@ApiOperation({summary: 'Get products on sale'})@ApiQuery({name: 'limit', required: false, description: 'Number of products to return', type: Number})@ApiResponse({status: undefined, description: 'Returns products on sale'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getProductsByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductsByCategory(category: ProductCategory, limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('category/:category')@ApiOperation({summary: 'Get products by category'})@ApiParam({name: 'category', enum: ProductCategory, description: 'Product category'})@ApiQuery({name: 'limit', required: false, description: 'Number of products to return', type: Number})@ApiResponse({status: undefined, description: 'Returns products by category'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ADMIN)@ApiBearerAuth()@ApiOperation({summary: 'Delete a product'})@ApiResponse({status: 200, description: 'Product deleted successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:157\n                        \n                    \n\n\n            \n                \n                        Removes a product by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ADMIN)@ApiBearerAuth()@ApiOperation({summary: 'Update a product'})@ApiResponse({status: 200, description: 'Product updated successfully'})@ApiResponse({status: 400, description: 'Bad request'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/controllers/product.controller.ts:139\n                        \n                    \n\n\n            \n                \n                        Updates a product by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nProduct ID\n\n\n                                            \n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating the product\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise - The updated product\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { ProductService } from '../services/product.service';\nimport { CreateProductDto } from '../dto/create-product.dto';\nimport { UpdateProductDto } from '../dto/update-product.dto';\nimport { ProductQueryDto } from '../dto/product-query.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiSecurity, ApiBearerAuth } from '@nestjs/swagger';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from 'src/users/enums/roles.enum';\n\n/**\n * Controller handling product-related HTTP requests.\n * @class ProductController\n * @description Manages public product endpoints including listing, searching, and viewing product details.\n */\n@ApiTags('Products')\n@Controller('products')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  /**\n   * Creates a new product.\n   * @param createProductDto - Data for creating a new product\n   * @returns Promise - The created product\n   */\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new product' })\n  @ApiResponse({ status: 201, description: 'Product successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  create(@Body() createProductDto: CreateProductDto) {\n    return this.productService.create(createProductDto);\n  }\n\n  /**\n   * Retrieves all products with optional filtering.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise - Products and pagination metadata\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all products with optional filtering' })\n  @ApiResponse({ status: 200, description: 'Products retrieved successfully' })\n  findAll(@Query() query: ProductQueryDto) {\n    return this.productService.findAll(query);\n  }\n\n  @Get('featured')\n  @ApiOperation({ summary: 'Get featured products' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of products to return', type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns featured products' })\n  async getFeaturedProducts(@Query('limit') limit?: number) {\n    return this.productService.getFeaturedProducts(limit);\n  }\n\n  @Get('new-arrivals')\n  @ApiOperation({ summary: 'Get new arrival products' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of products to return', type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns new arrival products' })\n  async getNewArrivals(@Query('limit') limit?: number) {\n    return this.productService.getNewArrivals(limit);\n  }\n\n  @Get('best-sellers')\n  @ApiOperation({ summary: 'Get best seller products' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of products to return', type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns best seller products' })\n  async getBestSellers(@Query('limit') limit?: number) {\n    return this.productService.getBestSellers(limit);\n  }\n\n  @Get('on-sale')\n  @ApiOperation({ summary: 'Get products on sale' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of products to return', type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns products on sale' })\n  async getOnSaleProducts(@Query('limit') limit?: number) {\n    return this.productService.getOnSaleProducts(limit);\n  }\n\n  @Get('category/:category')\n  @ApiOperation({ summary: 'Get products by category' })\n  @ApiParam({ name: 'category', enum: ProductCategory, description: 'Product category' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of products to return', type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'Returns products by category' })\n  async getProductsByCategory(\n    @Param('category') category: ProductCategory,\n    @Query('limit') limit?: number,\n  ) {\n    return this.productService.getProductsByCategory(category, limit);\n  }\n\n  /**\n   * Retrieves a product by its ID.\n   * @param id - Product ID\n   * @returns Promise - The found product\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a product by ID' })\n  @ApiResponse({ status: 200, description: 'Product retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  findOne(@Param('id') id: string) {\n    return this.productService.findOne(id);\n  }\n\n  /**\n   * Updates a product by its ID.\n   * @param id - Product ID\n   * @param updateProductDto - Data for updating the product\n   * @returns Promise - The updated product\n   */\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a product' })\n  @ApiResponse({ status: 200, description: 'Product updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {\n    return this.productService.update(id, updateProductDto);\n  }\n\n  /**\n   * Removes a product by its ID.\n   * @param id - Product ID\n   * @returns Promise\n   */\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a product' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  remove(@Param('id') id: string) {\n    return this.productService.remove(id);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductQueryDto.html":{"url":"classes/ProductQueryDto.html","title":"class - ProductQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/product-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for product query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                minPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:132\n                        \n                    \n\n            \n                \n                    Brand filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by product category', enum: ProductCategory})@IsEnum(ProductCategory)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:68\n                        \n                    \n\n            \n                \n                    Category filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by color', example: 'Black'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:120\n                        \n                    \n\n            \n                \n                    Color filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter best sellers', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:195\n                        \n                    \n\n            \n                \n                    Filter for best seller products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter featured products', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:161\n                        \n                    \n\n            \n                \n                    Filter for featured products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter new arrivals', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:178\n                        \n                    \n\n            \n                \n                    Filter for new arrival products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter products on sale', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:212\n                        \n                    \n\n            \n                \n                    Filter for products on sale.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page', default: 10, minimum: 1, maximum: 100})@Type(undefined)@IsNumber()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:44\n                        \n                    \n\n            \n                \n                    Number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by material', example: 'Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:144\n                        \n                    \n\n            \n                \n                    Material filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        maxPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by maximum price', example: 50})@Type(undefined)@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:96\n                        \n                    \n\n            \n                \n                    Maximum price filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        minPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by minimum price', example: 10})@Type(undefined)@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:82\n                        \n                    \n\n            \n                \n                    Minimum price filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number for pagination', default: 1, minimum: 1})@Type(undefined)@IsNumber()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:26\n                        \n                    \n\n            \n                \n                    Page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search term for product name or description', example: 'cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:56\n                        \n                    \n\n            \n                \n                    Search term for filtering products by name or description.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by size', example: 'M'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:108\n                        \n                    \n\n            \n                \n                    Size filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort field', example: 'price'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:225\n                        \n                    \n\n            \n                \n                    Field to sort products by.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"asc\" | \"desc\"\n\n                    \n                \n                \n                    \n                        Default value : 'asc'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order (asc or desc)', example: 'asc', enum: undefined})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:239\n                        \n                    \n\n            \n                \n                    Sort order (ASC or DESC).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsEnum, IsNumber, IsBoolean, IsString, Min, Max } from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../enums/product-category.enum';\n\n/**\n * Data Transfer Object for product query parameters.\n * @class ProductQueryDto\n * @description Defines the structure and validation rules for product filtering, pagination, and sorting.\n */\nexport class ProductQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({\n    description: 'Page number for pagination',\n    default: 1,\n    minimum: 1\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  @IsOptional()\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({\n    description: 'Number of items per page',\n    default: 10,\n    minimum: 1,\n    maximum: 100\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering products by name or description.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Search term for product name or description',\n    example: 'cotton'\n  })\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  /**\n   * Category filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by product category',\n    enum: ProductCategory\n  })\n  @IsEnum(ProductCategory)\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * Minimum price filter.\n   * @type {number}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by minimum price',\n    example: 10.00\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  minPrice?: number;\n\n  /**\n   * Maximum price filter.\n   * @type {number}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by maximum price',\n    example: 50.00\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  maxPrice?: number;\n\n  /**\n   * Size filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by size',\n    example: 'M'\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  /**\n   * Color filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by color',\n    example: 'Black'\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n\n  /**\n   * Brand filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  /**\n   * Material filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by material',\n    example: 'Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  /**\n   * Filter for featured products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter featured products',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  /**\n   * Filter for new arrival products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter new arrivals',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  /**\n   * Filter for best seller products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter best sellers',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  /**\n   * Filter for products on sale.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter products on sale',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n\n  /**\n   * Field to sort products by.\n   * @type {string}\n   * @default 'createdAt'\n   */\n  @ApiPropertyOptional({\n    description: 'Sort field',\n    example: 'price'\n  })\n  @IsString()\n  @IsOptional()\n  sortBy?: string;\n\n  /**\n   * Sort order (ASC or DESC).\n   * @type {'ASC' | 'DESC'}\n   * @default 'DESC'\n   */\n  @ApiPropertyOptional({\n    description: 'Sort order (asc or desc)',\n    example: 'asc',\n    enum: ['asc', 'desc']\n  })\n  @IsString()\n  @IsOptional()\n  sortOrder?: 'asc' | 'desc' = 'asc';\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductService \n\nProductService \n\n\n\nProductsModule\n\nProductsModule\n\nProductService  -->\n\nProductsModule->ProductService \n\n\n\n\n\nProductService\n\nProductService\n\nProductsModule -->\n\nProductService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './services/product.service';\nimport { ProductController } from './controllers/product.controller';\nimport { AdminProductController } from '../admin/controllers/admin-product.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductController],\n  providers: [ProductService],\n  exports: [ProductService],\n})\nexport class ProductsModule {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Role } from '../enums/roles.enum';\n\n@Entity()\nexport class Roles {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    unique: true,\n  })\n  name: Role;\n\n  @ManyToMany(() => Users, (user) => user.roles)\n  users: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from 'src/users/enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    \n    // No roles required means open to all authenticated users\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n    \n    const { user } = context.switchToHttp().getRequest();\n    \n    // Make sure user exists and has roles\n    if (!user || !user.roles) {\n      throw new ForbiddenException('User has no roles');\n    }\n    \n    // Check if user has any of the required roles\n    const hasRole = user.roles.some(\n      (userRole) => requiredRoles.includes(userRole.name)\n    );\n    \n    if (!hasRole) {\n      throw new ForbiddenException(\n        `User doesn't have sufficient permissions. Required roles: ${requiredRoles.join(', ')}`\n      );\n    }\n    \n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                images\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                stockQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, tumble dry low'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product category', enum: ProductCategory, example: undefined})@IsEnum(ProductCategory)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product description', example: 'A comfortable and stylish cotton t-shirt perfect for everyday wear.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discounted price (if on sale)', example: 24.99})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product image URLs', example: undefined})@IsArray()@IsUrl({}, {each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is active', default: true})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is featured', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is on sale', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '100% Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product name', example: 'Classic Cotton T-Shirt'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product price', example: 29.99})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Stock quantity', example: 100})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, IsObject } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class UpdateProductDto {\n  @ApiPropertyOptional({\n    description: 'Product name',\n    example: 'Classic Cotton T-Shirt'\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product description',\n    example: 'A comfortable and stylish cotton t-shirt perfect for everyday wear.'\n  })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product price',\n    example: 29.99\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  price?: number;\n\n  @ApiPropertyOptional({\n    description: 'Discounted price (if on sale)',\n    example: 24.99\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  discountedPrice?: number;\n\n  @ApiPropertyOptional({\n    description: 'Stock quantity',\n    example: 100\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  stockQuantity?: number;\n\n  @ApiPropertyOptional({\n    description: 'Product category',\n    enum: ProductCategory,\n    example: ProductCategory.T_SHIRTS\n  })\n  @IsEnum(ProductCategory)\n  @IsOptional()\n  category?: ProductCategory;\n\n  @ApiPropertyOptional({\n    description: 'Available sizes',\n    example: ['S', 'M', 'L', 'XL']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  sizes?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Available colors',\n    example: ['Black', 'White', 'Navy']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  colors?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product image URLs',\n    example: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg']\n  })\n  @IsArray()\n  @IsUrl({}, { each: true })\n  @IsOptional()\n  images?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { 'Fabric': '100% Cotton', 'Fit': 'Regular' }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '100% Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, tumble dry low'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is featured',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is on sale',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is active',\n    default: true\n  })\n  @IsBoolean()\n  @IsOptional()\n  isActive?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsEnum,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                order_by\n                            \n                            \n                                    \n                                    \n                                order_direction\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Limit must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_by\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'created_at'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirection\n\n                    \n                \n                \n                    \n                        Default value : OrderDirection.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(OrderDirection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Page number must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsEnum, IsInt, Min, IsString } from 'class-validator';\nimport { OrderDirection } from 'src/users/enums/order-direction.enum';\n\nexport class UserQueryDto {\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Page number must be greater than or equal to 1' })\n  page: number = 1;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Limit must be greater than or equal to 1' })\n  limit: number = 10;\n\n  @IsOptional()\n  @IsString()\n  order_by: string = 'created_at';\n\n  @IsOptional()\n  @IsEnum(OrderDirection) \n  order_direction: OrderDirection = OrderDirection.DESC; \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                dob\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isEmailVerified\n                            \n                            \n                                    \n                                isPhoneVerified\n                            \n                            \n                                    \n                                lastLoginAt\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                profileImage\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true, default: 'profile.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToMany,\n  JoinTable,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Roles } from './roles.entity';\n\n@Entity()\nexport class Users {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  firstName: string;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  lastName?: string;\n\n  @Column()\n  dob: Date;\n\n  @Column({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: true })\n  phone?: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  password: string;\n\n  @ManyToMany(() => Roles, (role) => role.users)\n  @JoinTable()\n  roles: Roles[];\n\n  @Column({ type: 'boolean', default: false })\n  isActive: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isEmailVerified: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isPhoneVerified: boolean;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  refreshToken: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n    default: 'profile.jpg',\n  })\n  profileImage: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  lastLoginAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User successfully created'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(userQueryDto: UserQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Return all users'})@ApiQuery({name: 'page', required: false, description: 'Page number'})@ApiQuery({name: 'limit', required: false, description: 'Number of items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userQueryDto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get user by ID'})@ApiParam({name: 'id', description: 'User ID'})@ApiResponse({status: 200, description: 'Return the user'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update user information'})@ApiParam({name: 'id', description: 'User ID'})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Put,\n  Delete,\n  Query,\n  UseGuards,\n  Patch,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';\n\n@ApiTags('D. Public - User Management')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  // Route to create a new user\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  async createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  // Route to get a list of all users\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ status: 200, description: 'Return all users' })\n  @ApiQuery({ name: 'page', required: false, description: 'Page number' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Number of items per page' })\n  async getAllUsers(@Query() userQueryDto: UserQueryDto) {\n    return this.usersService.getAllUsers(userQueryDto);\n  }\n\n  // Route to get a single user by ID\n  @Get(':id')\n  @ApiOperation({ summary: 'Get user by ID' })\n  @ApiParam({ name: 'id', description: 'User ID' })\n  @ApiResponse({ status: 200, description: 'Return the user' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async getUserById(@Param('id') id: string) {\n    return this.usersService.getUserById(id);\n  }\n\n  // Route to update user information\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update user information' })\n  @ApiParam({ name: 'id', description: 'User ID' })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateUser(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    return this.usersService.updateUser(id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/users.entity';\nimport { Roles } from './entities/roles.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Roles])],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(userQueryDto: UserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userQueryDto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileImage(id: string, profileImage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like } from 'typeorm';\nimport { Users } from './entities/users.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { Roles } from './entities/roles.entity';\nimport { Role } from './enums/roles.enum';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private userRepository: Repository,\n\n    @InjectRepository(Roles)\n    private rolesRepository: Repository,\n  ) {}\n\n  // Create a new user\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const { email, phone } = createUserDto;\n\n    const existingUser = await this.userRepository.findOne({\n      where: [{ email }, { phone }],\n    });\n\n    if (existingUser) {\n      throw new BadRequestException('Email or Phone number already in use.');\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n\n    // Fetch the 'CUSTOMER' role by default\n    const customerRole = await this.rolesRepository.findOne({\n      where: { name: Role.CUSTOMER },\n    });\n    if (!customerRole) {\n      throw new InternalServerErrorException('Customer role not found.');\n    }\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n      profileImage: createUserDto.profileImage || 'profile.jpg',\n      roles: [customerRole], // Assign the default 'CUSTOMER' role\n    });\n\n    try {\n      return await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to create user.');\n    }\n  }\n\n  // Get a list of users\n  async getAllUsers(userQueryDto: UserQueryDto): Promise {\n    const {\n      search,\n      page = 1,\n      limit = 10,\n      order_by = 'id',\n      order_direction = 'ASC',\n    } = userQueryDto;\n\n    const whereCondition = search\n      ? [\n          { email: Like(`%${search}%`) },\n          { phone: Like(`%${search}%`) },\n          { firstName: Like(`%${search}%`) },\n          { lastName: Like(`%${search}%`) },\n        ]\n      : undefined;\n\n    const [users, total] = await this.userRepository.findAndCount({\n      where: whereCondition,\n      order: {\n        [order_by]: order_direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC',\n      },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    if (total === 0) {\n      throw new NotFoundException('No users found.');\n    }\n\n    return users;\n  }\n\n  // Get user by ID\n  async getUserById(id: string): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found.`);\n    }\n\n    return user;\n  }\n\n  // Update user\n  async updateUser(id: string, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot update: User with ID ${id} not found.`,\n      );\n    }\n\n    // Only hash password if provided\n    if (updateUserDto.password) {\n      updateUserDto.password = await bcrypt.hash(updateUserDto.password, 10);\n    }\n\n    // Merge only provided fields\n    Object.assign(user, updateUserDto);\n\n    try {\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to update user.');\n    }\n  }\n\n  // Update profile image\n  async updateProfileImage(id: string, profileImage: string): Promise {\n    const user = await this.userRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot update image: User with ID ${id} not found.`,\n      );\n    }\n\n    user.profileImage = profileImage;\n\n    try {\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to update profile image.');\n    }\n  }\n\n  // Change user password\n  async changePassword(id: string, password: string): Promise {\n    const user = await this.userRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot change password: User with ID ${id} not found.`,\n      );\n    }\n\n    user.password = await bcrypt.hash(password, 10);\n\n    try {\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to change password.');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrorItem.html":{"url":"interfaces/ValidationErrorItem.html","title":"interface - ValidationErrorItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationErrorItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionFilter.html":{"url":"classes/ValidationExceptionFilter.html","title":"class - ValidationExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                formatNestedValidationErrors\n                            \n                            \n                                    Private\n                                formatValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ValidationExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/validation-exception.filter.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatNestedValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatNestedValidationErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValidationErrors(errors: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/controllers/admin-product.controller.ts\n            \n            controller\n            AdminProductController\n            \n                50 %\n                (6/12)\n            \n        \n        \n            \n                \n                src/admin/controllers/admin-user.controller.ts\n            \n            controller\n            AdminUserController\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            class\n            AdminUserQueryDto\n            \n                46 %\n                (6/13)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/admin/services/admin-user.service.ts\n            \n            injectable\n            AdminUserService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/guards/roles.guard.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/exceptions/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            class\n            ValidationExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            interface\n            ValidationErrorItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/controllers/product.controller.ts\n            \n            controller\n            ProductController\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                src/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/products/dto/product-query.dto.ts\n            \n            class\n            ProductQueryDto\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/services/product.service.ts\n            \n            injectable\n            ProductService\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            D : ^1.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.15.6\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderDirection   (src/.../order-direction.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/enums/order-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirection\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : dsc\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 T_SHIRTS\n                            \n                        \n                        \n                            \n                                Value : T_SHIRTS\n                            \n                        \n                        \n                            \n                                 SHIRTS\n                            \n                        \n                        \n                            \n                                Value : SHIRTS\n                            \n                        \n                        \n                            \n                                 JEANS\n                            \n                        \n                        \n                            \n                                Value : JEANS\n                            \n                        \n                        \n                            \n                                 PANTS\n                            \n                        \n                        \n                            \n                                Value : PANTS\n                            \n                        \n                        \n                            \n                                 DRESSES\n                            \n                        \n                        \n                            \n                                Value : DRESSES\n                            \n                        \n                        \n                            \n                                 SKIRTS\n                            \n                        \n                        \n                            \n                                Value : SKIRTS\n                            \n                        \n                        \n                            \n                                 SWEATERS\n                            \n                        \n                        \n                            \n                                Value : SWEATERS\n                            \n                        \n                        \n                            \n                                 JACKETS\n                            \n                        \n                        \n                            \n                                Value : JACKETS\n                            \n                        \n                        \n                            \n                                 HOODIES\n                            \n                        \n                        \n                            \n                                Value : HOODIES\n                            \n                        \n                        \n                            \n                                 SHOES\n                            \n                        \n                        \n                            \n                                Value : SHOES\n                            \n                        \n                        \n                            \n                                 ACCESSORIES\n                            \n                        \n                        \n                            \n                                Value : ACCESSORIES\n                            \n                        \n                        \n                            \n                                 UNDERWEAR\n                            \n                        \n                        \n                            \n                                Value : UNDERWEAR\n                            \n                        \n                        \n                            \n                                 SPORTWEAR\n                            \n                        \n                        \n                            \n                                Value : SPORTWEAR\n                            \n                        \n                        \n                            \n                                 SUITS\n                            \n                        \n                        \n                            \n                                Value : SUITS\n                            \n                        \n                        \n                            \n                                 FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                 CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                 ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                Value : ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                 KIDS_WEAR\n                            \n                        \n                        \n                            \n                                Value : KIDS_WEAR\n                            \n                        \n                        \n                            \n                                 MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                Value : MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                 PLUS_SIZE\n                            \n                        \n                        \n                            \n                                Value : PLUS_SIZE\n                            \n                        \n            \n        \n\n    src/users/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : CUSTOMER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 DELIVERY_MAN\n                            \n                        \n                        \n                            \n                                Value : DELIVERY_MAN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2025 AZMINUR RAHMAN\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_exports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nProductsModule\n\nProductsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductsModule->ProductService \n\n\n\n\n\nAdminUserService \n\nAdminUserService \n\nAdminUserService  -->\n\nAdminModule->AdminUserService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nRolesGuard \n\nRolesGuard \n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductsModule -->\n\nProductService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Decorator for specifying required roles for route handlers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Metadata key for storing roles in route handlers.\n\n                \n            \n\n        \n    \n\n    src/auth/guards/roles.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
